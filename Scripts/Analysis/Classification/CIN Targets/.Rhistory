knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
library(data.table)
library(AnnotationDbi)
library(org.Hs.eg.db)
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
# Using the TCGA PanCan RSEM Expected Counts
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_data <- original[,order(colnames(original))]
order_data <- original[0:5000,0:5000]
# Cancer/Tissue Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(mltools)
library(knitr)
library(factoextra)
library(data.table)
library(ggpubr)
library(psych)
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(stringr::str_split(strings, "\\-"),
function(x) x[index])
return(element_list)
}
ori_hrd <- read_tsv("Data/CIN_Features/TCGA.HRD_withSampleID.txt")
ori_arm_cnv <- read_tsv("Data/CIN_Features/CNV_Data/PANCAN_ArmCallsAndAneuploidyScore_092817.txt")
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
# Combine the metadata
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
select(-"Type")
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(mltools)
library(knitr)
library(factoextra)
library(data.table)
library(ggpubr)
library(psych)
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(stringr::str_split(strings, "\\-"),
function(x) x[index])
return(element_list)
}
ori_hrd <- read_tsv("Data/CIN_Features/TCGA.HRD_withSampleID.txt")
ori_arm_cnv <- read_tsv("Data/CIN_Features/CNV_Data/PANCAN_ArmCallsAndAneuploidyScore_092817.txt")
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
# Combine the metadata
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
)
View(full_cin)
View(full_cin)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
library(data.table)
library(AnnotationDbi)
library(org.Hs.eg.db)
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
# Load the TCGA PanCan RSEM Expected Counts
ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_exp <- ori_exp[,order(colnames(ori_exp))]
# Load the TCGA PanCan TPM counts
ori_cts <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
order_cts <- ori_cts[,order(colnames(ori_cts))]
# Cancer/Tissue Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- order_data
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
return(ceiling((2^x)-1))
}
trans_exp <- order_exp
rownames(trans_exp) <- NULL
count_exp <- trans_exp %>%
mutate_at(vars(-1), untransform)
View(count_exp)
counts_data <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_data,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_data <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_exp,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_data <- counts_data %>%
mutate(gene = trimws(gene))
counts_exp <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_exp,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_exp <- counts_exp %>%
mutate(gene = trimws(gene))
View(counts_exp)
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_data)
# Combine duplicate genes together using the median of the expression
grouped <- counts_data[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Genes, .SDcols = -"Genes"]
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Genes, .SDcols = -"Genes"]
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Genes, .SDcols = -"genes"]
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = genes, .SDcols = -"genes"]
View(counts_exp)
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
View(ori_exp)
# Load the TCGA PanCan RSEM Expected Counts
ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_exp <- ori_exp[,order(colnames(ori_exp[,0:500]))]
# Load the TCGA PanCan TPM counts
ori_cts <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
# Load the TCGA PanCan RSEM Expected Counts
# ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
# order_exp <- ori_exp[,order(colnames(ori_exp))]
order_exp <- order_exp[0:6000,0:2500]
View(order_exp)
# Load the TCGA PanCan RSEM Expected Counts
ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_exp <- ori_exp[,order(colnames(ori_exp))]
order_exp <- order_exp[0:6000,0:2500]
# Load the TCGA PanCan TPM counts
ori_cts <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
order_cts <- ori_cts[,order(colnames(ori_cts))]
order_cts <- order_cts[0:6000,0:2500]
# Cancer/Tissue Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
trans_exp <- order_exp
rownames(trans_exp) <- NULL
count_exp <- trans_exp %>%
mutate_at(vars(-1), untransform)
View(count_exp)
counts_exp <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_exp,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_exp <- counts_exp %>%
mutate(gene = trimws(gene))
View(counts_exp)
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "Genes")
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gne")
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gene")
View(exp_data)
View(order_cts)
View(exp_data)
# Load the TCGA PanCan RSEM Expected Counts
# ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_exp <- ori_exp[,order(colnames(ori_exp))]
order_exp <- order_exp[0:6000,0:2500]
# Load the TCGA PanCan TPM counts
# ori_cts <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
order_cts <- ori_cts[,order(colnames(ori_cts))] %>%
dplyr::select(-"id")
order_cts <- order_cts[0:6000,0:2500]
# Cancer/Tissue Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
View(gene_ids)
tpm_data <- order_cts %>%
column_to_rownames(var = "Gene")
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(order_cts)
# Combine duplicate genes together using the median of the expression
grouped_cts <- order_cts[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Gene, .SDcols = -"Gene"]
# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_cts <- as.data.frame(grouped_cts)
cts_data <- distinct(groups_cts) %>%
column_to_rownames(var = "Gene")
View(cts_data)
View(count_exp)
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(paste("sample", ends_with(codes_to_use), sep = ","))
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(paste0("sample", ends_with(codes_to_use), sep = ","))
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(c("sample", ends_with(codes_to_use), sep = ","))
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(c("sample", ends_with(codes_to_use)))
# cts_samples_to_use <- order_cts %>%  dplyr::select(ends_with(codes_to_use))
View(exp_samples_to_use)
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(c("sample", ends_with(codes_to_use)))
cts_samples_to_use <- order_cts %>%  dplyr::select(c("Gene", ends_with(codes_to_use)))
View(cts_samples_to_use)
counts_exp <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
exp_samples_to_use,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_exp <- counts_exp %>%
mutate(gene = trimws(gene))
View(counts_exp)
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
setDT(cts_samples_to_use)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
grouped_cts <- order_cts[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Gene, .SDcols = -"Gene"]
# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gene")
groups_cts <- as.data.frame(grouped_cts)
cts_data <- distinct(groups_cts) %>%
column_to_rownames(var = "Gene")
