set.seed(33)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost", "foreach")) %dopar% {
cat(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
set.seed(33)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost")) %dopar% {
print(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
rna_list <- list(
transcripts_per_million = tpm_set, # Seems to be the best performing
scaled_transcripts_per_million = scld_tpm_set, # not too useful (scaled)
log_scaled_transcripts_per_million = log_scld_tpm,
log_transcripts_per_million = log_tpm,
expected_counts = exp_set,
scaled_expected_counts = scld_exp_set,
log_expected_counts = log_exp,
log_scaled_expected_counts = log_scld_exp
)
# aneu_feature_list <- colnames(full_cin[1,6:length(full_cin)])
aneu_feature_list <- colnames(full_cin[1,6:8])
reg_feature_list <- colnames(full_cin[1,6:12])
n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(n.cores, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
set.seed(33)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost")) %dopar% {
print(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
rna_list <- list(
transcripts_per_million = tpm_set, # Seems to be the best performing
scaled_transcripts_per_million = scld_tpm_set, # not too useful (scaled)
log_scaled_transcripts_per_million = log_scld_tpm,
log_transcripts_per_million = log_tpm,
expected_counts = exp_set,
scaled_expected_counts = scld_exp_set,
log_expected_counts = log_exp,
log_scaled_expected_counts = log_scld_exp
)
# aneu_feature_list <- colnames(full_cin[1,6:length(full_cin)])
aneu_feature_list <- colnames(full_cin[1,6:8])
reg_feature_list <- colnames(full_cin[1,6:12])
n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(n.cores, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
set.seed(33)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost")) %dopar% {
# print(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(n.cores, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost")) %dopar% {
# print(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
library(foreach)
library(doParallel)
library(dplyr)
library(xgboost)
n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(n.cores, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
res <- foreach(feature = aneu_feature_list, .combine=rbind, .packages=c("dplyr", "xgboost")) %dopar% {
# print(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
foreach(j = 1:nrow(grid), .combine=rbind) %dopar% {
cat("\n Depth ", grid$max_depth[j], "\n Eta ", grid$eta[j], "\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 100,
objective = "multi:softmax",
early_stopping_rounds = 10,
nfold = 2,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
gamma = grid$gamma[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
for (feature in aneu_feature_list){
cat(paste0("\n", feature, ":"))
aneu_cat_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
Logloss = numeric()
)
for (i in 1:length(rna_list)) {
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
for (j in 1:nrow(grid)) {
cat("\n Depth ",grid$max_depth[j],
"\n Eta ", grid$eta[j],
"\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 200,
objective = "multi:softmax",
early_stopping_rounds = 50,
nfold = 5,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
num_class = 3,
verbose = 0
)
best_loss <- m_xgb_untuned$evaluation_log$test_mlogloss_mean[m_xgb_untuned$best_iteration]
aneu_cat_metrics_df <- rbind(aneu_cat_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
Logloss = best_loss
)
)
}
}
write.csv(aneu_cat_metrics_df, paste0("Data/aneu_cat_xgb_metrics_params_d",feature,"_",Sys.Date(), ".csv"))
}
for (feature in reg_feature_list){
cat(paste0("\n", feature, ":"))
aneu_reg_metrics_df <- data.frame(
Feature = character(),
RNA_Set = character(),
Depth = numeric(),
Learning_Rate = numeric(),
Gamma = numeric(),
RMSE = numeric()
)
for (i in 1:length(rna_list)){
rna <- rna_list[[i]]
name <- names(rna_list)[i]
cat(paste0("\n\t", name, ":"))
full_df <- merge(rna, full_cin, by = "row.names")
y <- as.integer(full_df[[feature]])
X <- full_df %>% select(-append("Row.names",colnames(full_cin)))
y[y == -1] <- 0
y[y == 1] <- 2
y[y == 0] <- 1
xgb_data <- xgb.DMatrix(data = as.matrix(X), label = y)
grid <- expand.grid(
max_depth = seq(1, 15,3),
gamma = seq(0, 2, 2.3),
eta = seq(0.01, 0.1, 1),  # Additional parameter for example
subsample = 1,       # Fixed for simplicity
colsample_bytree = 1 # Fixed for simplicity
)
for (j in 1:nrow(grid)) {
cat("\n Depth ",grid$max_depth[j],
"\n Eta ", grid$eta[j],
"\n Gamma ", grid$gamma[j], "\n")
set.seed(123)
m_xgb_untuned <- xgb.cv(
data = xgb_data,
nrounds = 1000,
objective = "reg:squarederror",
eval_metric = "rmse",
early_stopping_rounds = 30,
nfold = 5,
max_depth = grid$max_depth[j],
eta = grid$eta[j],
verbose = 0
)
best_rmse <- m_xgb_untuned$evaluation_log$test_rmse_mean[m_xgb_untuned$best_iteration]
aneu_reg_metrics_df <- rbind(aneu_reg_metrics_df,
data.frame(
Feature = feature,
RNA_Set = name,
Depth = grid$max_depth[j],
Learning_Rate = grid$eta[j],
Gamma = grid$gamma[j],
RMSE = best_rmse
)
)
}
}
write.csv(aneu_reg_metrics_df, paste0("Data/aneu_reg_xgb_metrics_params_",feature,"_",Sys.Date(), ".csv"))
}
