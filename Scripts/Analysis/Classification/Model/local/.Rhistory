arrange(desc(Gain))
top_barplt <- ggplot(top_gene_each, aes(x = reorder(Feature, Gain), y = Gain)) +
geom_bar(stat = "identity") +
labs(
title = "Top Feature for each Target",
x = "Feature",
y = "Gain"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
) +
geom_text(aes(label = Target ), vjust = 1.5 , size = 3)
print(top_barplt)
# Heatmap of the top features
top_genes_complete <- full_feature_imp %>%
filter(Feature %in% top_gene_each$Feature) %>%
select(Feature, Target, Gain) %>%
pivot_wider(names_from = Feature, values_from = Gain) %>%
replace(is.na(.), 0) %>%
column_to_rownames("Target")
pheatmap(top_genes_complete, cluster_rows = TRUE, cluster_cols = FALSE, border_color = "black", show_colnames = TRUE, show_rownames = TRUE, main = "Top Target Features", )
# top_heatmp <- ggplot(top_genes_complete, aes(x = Feature, y = Target, fill = Gain)) +
#   geom_tile() +
#   scale_fill_gradient(
#     low = "#FFEBEE", high = "#B71C1C",
#     limits = c(min(top_genes_complete$Gain), max(top_genes_complete$Gain))
#   ) +
#   theme_minimal() +
#   labs(
#     title = "Top Features for each Target",
#     x = "Feature",
#     y = "Target"
#   ) +
#   theme(
#     axis.text.x = element_text(angle = 45, hjust = 1),
#     plot.title = element_text(hjust = 0.5)
#   )
# print(top_heatmp)
# Plot of the top feature for each target
top_gene_each <- full_feature_imp %>%
group_by(Target) %>%
top_n(2, Gain) %>%
arrange(desc(Gain))
top_barplt <- ggplot(top_gene_each, aes(x = reorder(Feature, Gain), y = Gain)) +
geom_bar(stat = "identity") +
labs(
title = "Top Feature for each Target",
x = "Feature",
y = "Gain"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
) +
geom_text(aes(label = Target ), vjust = 1.5 , size = 3)
print(top_barplt)
# Heatmap of the top features
top_genes_complete <- full_feature_imp %>%
filter(Feature %in% top_gene_each$Feature) %>%
select(Feature, Target, Gain) %>%
pivot_wider(names_from = Feature, values_from = Gain) %>%
replace(is.na(.), 0) %>%
column_to_rownames("Target")
pheatmap(top_genes_complete, cluster_rows = FALSE, cluster_cols = TRUE, border_color = "black", show_colnames = TRUE, show_rownames = TRUE, main = "Top Target Features", )
# top_heatmp <- ggplot(top_genes_complete, aes(x = Feature, y = Target, fill = Gain)) +
#   geom_tile() +
#   scale_fill_gradient(
#     low = "#FFEBEE", high = "#B71C1C",
#     limits = c(min(top_genes_complete$Gain), max(top_genes_complete$Gain))
#   ) +
#   theme_minimal() +
#   labs(
#     title = "Top Features for each Target",
#     x = "Feature",
#     y = "Target"
#   ) +
#   theme(
#     axis.text.x = element_text(angle = 45, hjust = 1),
#     plot.title = element_text(hjust = 0.5)
#   )
# print(top_heatmp)
# Create the full feature importance dataframe
full_feature_imp <- data.frame()
for (feature in response_features) {
cat(
"Feature: ", feature, "\n\n"
)
# Create df to store the importance matrix
feature_imp_df <- data.frame()
# Create the out-of-fold predictions column
oof_predictions <- numeric(nrow(base_oof_predictions))
# Determine parameter set based on feature type
parameters <- if (feature %in% cat_features) {
base_cat_parameters
} else if (feature %in% reg_features) {
base_reg_parameters
} else {
cat("Feature not found")
next
}
# Select the parameters and weights corresponding to the feature
selected_parameters <- parameters[parameters$Feature == feature, ]
if (nrow(selected_parameters) == 0) {
cat("No parameters found for feature: ", feature, "\n")
next
}
# Print selected parameters
cat("\n Selected Parameters:\n")
print(selected_parameters)
rna_selection_name <- rna_list[[selected_parameters$RNA_set]]
rna_set <- read.csv(paste0(
input_path,
"RNA/Train/train_",
rna_selection_name,
"_soi.csv"),
row.names = 1
)
# Load and prepare data
rna_selection_name <- rna_list[[selected_parameters$RNA_set]]
rna_set <- read.csv(paste0(
input_path,
"RNA/Train/train_",
rna_selection_name,
"_soi.csv"),
row.names = 1
)
full_df <- merge(rna_set, full_cin, by = "row.names")
y <- ifelse(feature %in% cat_features, as.integer, as.numeric)(full_df[[feature]])
# cat("\n y: ")
# print(head(y))
X <- full_df %>% select(-c("Row.names", all_of(response_features)))
# Initialize containers for predictions and feature importance
oof_predictions <- numeric(nrow(X))
feature_imp_df <- data.frame()
# Fold-wise training
for (fold_index in seq_along(folds)) {
cat(
"\n Fold: ", fold_index, "\n"
)
train_indices <- setdiff(seq_len(nrow(full_df)), folds[[fold_index]])
valid_indices <- folds[[fold_index]]
train_data <- xgb.DMatrix(data = as.matrix(X[train_indices, ]), label = y[train_indices])
valid_data <- xgb.DMatrix(data = as.matrix(X[valid_indices, ]), label = y[valid_indices])
# Adjust weights for categorical features
if (feature %in% cat_features) {
weights <- as.numeric(feature_digit_function(factor(y[train_indices], levels = c(0, 1, 2))))
setinfo(train_data, "weight", weights)
}
# Train model
params_list <- list(
data = train_data,
nrounds = selected_parameters$Trees,
objective = ifelse(feature %in% cat_features, "multi:softmax", "reg:squarederror"),
eval_metric = ifelse(feature %in% cat_features, "mlogloss", "rmse"),
max_depth = selected_parameters$Max_depth,
min_child_weight = selected_parameters$Child_weight,
early_stopping_rounds = early_stop,
eta = selected_parameters$Eta,
gamma = selected_parameters$Gamma,
watchlist = list(eval = valid_data),
print_every_n = print_every
)
# Only add num_class for categorical features
if (feature %in% cat_features) {
params_list$num_class <- 3
}
xgb_model <- do.call(xgb.train, params_list)
# Store OOF predictions
oof_predictions[valid_indices] <- predict(xgb_model, valid_data)
cat("\n OOF Predictions: \n",
dim(oof_predictions), "\n")
print(head(oof_predictions, 10))
# Create the feature importance matrix
importance_matrix <- xgb.importance(feature_names = colnames(X), model = xgb_model)
# Store the importance matrix in the dataframe
feature_imp_df <- rbind(feature_imp_df, as.data.frame(importance_matrix))
}
# Store the predictions in the corresponding column
base_oof_predictions[[paste0("pred_", feature)]] <- oof_predictions
print(base_oof_predictions[[paste0("pred_", feature)]][1:10])
# get the feature imp df
imp <- feat_imp(imp_df = feature_imp_df)
top_genes <- imp$top_genes
full_feature_imp <- rbind(
full_feature_imp,
imp$feature_imp_df %>%
mutate(Target = feature)
) %>%
arrange(desc(Gain))
}
# Create the full feature importance dataframe
full_feature_imp <- data.frame()
for (feature in response_features[40:44]) {
cat(
"Feature: ", feature, "\n\n"
)
# Create df to store the importance matrix
feature_imp_df <- data.frame()
# Create the out-of-fold predictions column
oof_predictions <- numeric(nrow(base_oof_predictions))
# Determine parameter set based on feature type
parameters <- if (feature %in% cat_features) {
base_cat_parameters
} else if (feature %in% reg_features) {
base_reg_parameters
} else {
cat("Feature not found")
next
}
# Select the parameters and weights corresponding to the feature
selected_parameters <- parameters[parameters$Feature == feature, ]
if (nrow(selected_parameters) == 0) {
cat("No parameters found for feature: ", feature, "\n")
next
}
# Print selected parameters
cat("\n Selected Parameters:\n")
print(selected_parameters)
# Load and prepare data
rna_selection_name <- rna_list[[selected_parameters$RNA_set]]
rna_set <- read.csv(paste0(
input_path,
"RNA/Train/train_",
rna_selection_name,
"_soi.csv"),
row.names = 1
)
full_df <- merge(rna_set, full_cin, by = "row.names")
y <- ifelse(feature %in% cat_features, as.integer, as.numeric)(full_df[[feature]])
# cat("\n y: ")
# print(head(y))
X <- full_df %>% select(-c("Row.names", all_of(response_features)))
# Initialize containers for predictions and feature importance
oof_predictions <- numeric(nrow(X))
feature_imp_df <- data.frame()
# Fold-wise training
for (fold_index in seq_along(folds)) {
cat(
"\n Fold: ", fold_index, "\n"
)
train_indices <- setdiff(seq_len(nrow(full_df)), folds[[fold_index]])
valid_indices <- folds[[fold_index]]
train_data <- xgb.DMatrix(data = as.matrix(X[train_indices, ]), label = y[train_indices])
valid_data <- xgb.DMatrix(data = as.matrix(X[valid_indices, ]), label = y[valid_indices])
# Adjust weights for categorical features
if (feature %in% cat_features) {
weights <- as.numeric(feature_digit_function(factor(y[train_indices], levels = c(0, 1, 2))))
setinfo(train_data, "weight", weights)
}
# Train model
params_list <- list(
data = train_data,
nrounds = selected_parameters$Trees,
objective = ifelse(feature %in% cat_features, "multi:softmax", "reg:squarederror"),
eval_metric = ifelse(feature %in% cat_features, "mlogloss", "rmse"),
max_depth = selected_parameters$Max_depth,
min_child_weight = selected_parameters$Child_weight,
early_stopping_rounds = early_stop,
eta = selected_parameters$Eta,
gamma = selected_parameters$Gamma,
watchlist = list(eval = valid_data),
print_every_n = print_every
)
# Only add num_class for categorical features
if (feature %in% cat_features) {
params_list$num_class <- 3
xgb_model <- do.call(xgb.train, params_list)
# Store OOF predictions
oof_predictions[valid_indices] <- predict(xgb_model, valid_data)
cat("\n OOF Predictions: \n",
dim(oof_predictions), "\n")
print(head(oof_predictions, 10))
# Create the feature importance matrix
importance_matrix <- xgb.importance(feature_names = colnames(X), model = xgb_model)
# Store the importance matrix in the dataframe
feature_imp_df <- rbind(feature_imp_df, as.data.frame(importance_matrix))
}
# Store the predictions in the corresponding column
base_oof_predictions[[paste0("pred_", feature)]] <- oof_predictions
print(base_oof_predictions[[paste0("pred_", feature)]][1:10])
# get the feature imp df
imp <- feat_imp(imp_df = feature_imp_df)
top_genes <- imp$top_genes
full_feature_imp <- rbind(
full_feature_imp,
imp$feature_imp_df %>%
mutate(Target = feature)
) %>%
arrange(desc(Gain))
}
# # Save the predictions
# write.csv(
#   base_oof_predictions,
#   "Data/Gen_model_output/Predictions/Base_predictions/Full_base_predictions.csv"
# )
# write.csv(
#   base_oof_predictions,
#   "Data/Gen_model_input/Base_predictions/Full_base_predictions.csv"
# )
cat("\n\n Training the base models complete")
# Create the full feature importance dataframe
full_feature_imp <- data.frame()
for (feature in response_features[40:44]) {
cat(
"Feature: ", feature, "\n\n"
)
# Create df to store the importance matrix
feature_imp_df <- data.frame()
# Create the out-of-fold predictions column
oof_predictions <- numeric(nrow(base_oof_predictions))
# Determine parameter set based on feature type
parameters <- if (feature %in% cat_features) {
base_cat_parameters
} else if (feature %in% reg_features) {
base_reg_parameters
} else {
cat("Feature not found")
next
}
# Select the parameters and weights corresponding to the feature
selected_parameters <- parameters[parameters$Feature == feature, ]
if (nrow(selected_parameters) == 0) {
cat("No parameters found for feature: ", feature, "\n")
next
}
# Print selected parameters
cat("\n Selected Parameters:\n")
print(selected_parameters)
# Load and prepare data
rna_selection_name <- rna_list[[selected_parameters$RNA_set]]
rna_set <- read.csv(paste0(
input_path,
"RNA/Train/train_",
rna_selection_name,
"_soi.csv"),
row.names = 1
)
full_df <- merge(rna_set, full_cin, by = "row.names")
y <- ifelse(feature %in% cat_features, as.integer, as.numeric)(full_df[[feature]])
# cat("\n y: ")
# print(head(y))
X <- full_df %>% select(-c("Row.names", all_of(response_features)))
# Initialize containers for predictions and feature importance
oof_predictions <- numeric(nrow(X))
feature_imp_df <- data.frame()
# Fold-wise training
for (fold_index in seq_along(folds)) {
cat(
"\n Fold: ", fold_index, "\n"
)
train_indices <- setdiff(seq_len(nrow(full_df)), folds[[fold_index]])
valid_indices <- folds[[fold_index]]
train_data <- xgb.DMatrix(data = as.matrix(X[train_indices, ]), label = y[train_indices])
valid_data <- xgb.DMatrix(data = as.matrix(X[valid_indices, ]), label = y[valid_indices])
# Adjust weights for categorical features
if (feature %in% cat_features) {
weights <- as.numeric(feature_digit_function(factor(y[train_indices], levels = c(0, 1, 2))))
setinfo(train_data, "weight", weights)
}
# Train model
params_list <- list(
data = train_data,
nrounds = selected_parameters$Trees,
objective = ifelse(feature %in% cat_features, "multi:softmax", "reg:squarederror"),
eval_metric = ifelse(feature %in% cat_features, "mlogloss", "rmse"),
max_depth = selected_parameters$Max_depth,
min_child_weight = selected_parameters$Child_weight,
early_stopping_rounds = early_stop,
eta = selected_parameters$Eta,
gamma = selected_parameters$Gamma,
watchlist = list(eval = valid_data),
print_every_n = print_every
)
# Only add num_class for categorical features
if (feature %in% cat_features) {
params_list$num_class <- 3}
xgb_model <- do.call(xgb.train, params_list)
# Store OOF predictions
oof_predictions[valid_indices] <- predict(xgb_model, valid_data)
cat("\n OOF Predictions: \n",
dim(oof_predictions), "\n")
print(head(oof_predictions, 10))
# Create the feature importance matrix
importance_matrix <- xgb.importance(feature_names = colnames(X), model = xgb_model)
# Store the importance matrix in the dataframe
feature_imp_df <- rbind(feature_imp_df, as.data.frame(importance_matrix))
# Store the predictions in the corresponding column
base_oof_predictions[[paste0("pred_", feature)]] <- oof_predictions
print(base_oof_predictions[[paste0("pred_", feature)]][1:10])
# get the feature imp df
imp <- feat_imp(imp_df = feature_imp_df)
top_genes <- imp$top_genes
full_feature_imp <- rbind(
full_feature_imp,
imp$feature_imp_df %>%
mutate(Target = feature)
) %>%
arrange(desc(Gain))
}
# # Save the predictions
# write.csv(
#   base_oof_predictions,
#   "Data/Gen_model_output/Predictions/Base_predictions/Full_base_predictions.csv"
# )
# write.csv(
#   base_oof_predictions,
#   "Data/Gen_model_input/Base_predictions/Full_base_predictions.csv"
# )
cat("\n\n Training the base models complete")
# Create the full feature importance dataframe
full_feature_imp <- data.frame()
for (feature in response_features[40:44]) {
cat(
"Feature: ", feature, "\n\n"
)
# Create df to store the importance matrix
feature_imp_df <- data.frame()
# Create the out-of-fold predictions column
oof_predictions <- numeric(nrow(base_oof_predictions))
# Determine parameter set based on feature type
parameters <- if (feature %in% cat_features) {
base_cat_parameters
} else if (feature %in% reg_features) {
base_reg_parameters
} else {
cat("Feature not found")
next
}
# Select the parameters and weights corresponding to the feature
selected_parameters <- parameters[parameters$Feature == feature, ]
if (nrow(selected_parameters) == 0) {
cat("No parameters found for feature: ", feature, "\n")
next
}
# Print selected parameters
cat("\n Selected Parameters:\n")
print(selected_parameters)
# Load and prepare data
rna_selection_name <- rna_list[[selected_parameters$RNA_set]]
rna_set <- read.csv(paste0(
input_path,
"RNA/Train/train_",
rna_selection_name,
"_soi.csv"),
row.names = 1
)
full_df <- merge(rna_set, full_cin, by = "row.names")
y <- ifelse(feature %in% cat_features, as.integer, as.numeric)(full_df[[feature]])
# cat("\n y: ")
# print(head(y))
X <- full_df %>% select(-c("Row.names", all_of(response_features)))
# Initialize containers for predictions and feature importance
oof_predictions <- numeric(nrow(X))
feature_imp_df <- data.frame()
# Fold-wise training
for (fold_index in seq_along(folds)) {
cat(
"\n Fold: ", fold_index, "\n"
)
train_indices <- setdiff(seq_len(nrow(full_df)), folds[[fold_index]])
valid_indices <- folds[[fold_index]]
train_data <- xgb.DMatrix(data = as.matrix(X[train_indices, ]), label = y[train_indices])
valid_data <- xgb.DMatrix(data = as.matrix(X[valid_indices, ]), label = y[valid_indices])
# Adjust weights for categorical features
if (feature %in% cat_features) {
weights <- as.numeric(feature_digit_function(factor(y[train_indices], levels = c(0, 1, 2))))
setinfo(train_data, "weight", weights)
}
# Train model
params_list <- list(
data = train_data,
nrounds = selected_parameters$Trees,
objective = ifelse(feature %in% cat_features, "multi:softmax", "reg:squarederror"),
eval_metric = ifelse(feature %in% cat_features, "mlogloss", "rmse"),
max_depth = selected_parameters$Max_depth,
min_child_weight = selected_parameters$Child_weight,
early_stopping_rounds = early_stop,
eta = selected_parameters$Eta,
gamma = selected_parameters$Gamma,
watchlist = list(eval = valid_data),
print_every_n = print_every
)
# Only add num_class for categorical features
if (feature %in% cat_features) {
params_list$num_class <- 3}
xgb_model <- do.call(xgb.train, params_list)
# Store OOF predictions
oof_predictions[valid_indices] <- predict(xgb_model, valid_data)
cat("\n OOF Predictions: \n",
dim(oof_predictions), "\n")
print(head(oof_predictions, 10))
# Create the feature importance matrix
importance_matrix <- xgb.importance(feature_names = colnames(X), model = xgb_model)
# Store the importance matrix in the dataframe
feature_imp_df <- rbind(feature_imp_df, as.data.frame(importance_matrix))
}
# Store the predictions in the corresponding column
base_oof_predictions[[paste0("pred_", feature)]] <- oof_predictions
print(base_oof_predictions[[paste0("pred_", feature)]][1:10])
# get the feature imp df
imp <- feat_imp(imp_df = feature_imp_df)
top_genes <- imp$top_genes
full_feature_imp <- rbind(
full_feature_imp,
imp$feature_imp_df %>%
mutate(Target = feature)
) %>%
arrange(desc(Gain))
}
