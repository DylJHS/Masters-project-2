by = "id", all = FALSE, suffixes = c("", i)
)
}
end_time <- Sys.time()
cat('\n',i," iterations with a total duration of: ", end_time - start_time, "seconds")
View(Dif_table)
Dif_table <- Dif_table %>% dplyr::rename(mean_dif1 = mean_dif)
Mean_table <- Mean_table %>% dplyr::rename(ctrl_geom_mean1 = ctrl_geom_mean)
set.seed(123)
controls <- sample(1:num_datasets, 5)
dif_pairing_names <- unlist(lapply(controls, function(i) paste("mean_dif", i, sep ="")))
violin_graph_long_data <- Dif_table[dif_pairing_names] %>%
pivot_longer(cols = dif_pairing_names,
names_to = "Variable",
values_to = "Value") %>%
filter(Value != 0)
plot1 <- ggplot(violin_graph_long_data, aes(y = Value, x = Variable)) +
geom_violin(trim = FALSE, fill = "#778899", alpha = 0.5)+
geom_boxplot(varwidth = T, alpha  = 0.25, outlier.colour = "red")+
labs(x = "Unique SOI to Control-set Pairings ", y = expression("Expression Difference" ~ (log[2])),
title = "CANCEROUS: DISTRIBUTION OF THE SET-OF-INTEREST \n TO CONTROL-SET EXPRESSION DIFFERENCE ACROSS VARIOUS PAIRINGS") +
theme(
legend.position = "none",
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(color = "black", size = 13),
axis.text.x = element_blank(),
panel.background = element_rect(fill = "white"),
legend.text = element_blank(),
plot.title = element_text(hjust = 0.5, size = 19),
panel.border = element_rect(fill = "transparent", color = "#9B30FF", linewidth = 2),
panel.grid.major.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
plot.title.position = "plot"
)
print(plot1)
Fried_test_data <- Dif_table %>%
gather(key = "Pairing", value = "Difference", starts_with("mean")) %>%
mutate(Sample = as.factor(id), Pairing = as.factor(Pairing)) %>%
select(Sample, Pairing, Difference)
friedman_result <- coin::friedman_test(Difference ~ Pairing | Sample, data = Fried_test_data)
print(friedman_result)
Paired_wilc_table <- Dif_table %>%
select(starts_with("mean_dif")) %>%
mutate_all(as.numeric)
Contrast_table <- data.frame(Set = character(0), P_Value = numeric(0), Adj_P_Value = numeric(0), Significant = character(0))
# Loop over each control gene-sets
for (i in 1:num_datasets) {
set = paste('mean_dif', i, sep = "")
Global_table <- Paired_wilc_table %>%
mutate(global = rowMeans(select(., -set), na.rm = TRUE)) %>%
select(set, global)
wlcx_paired_res <- wilcox.test(Global_table[[set]], Global_table$global, paired = TRUE)
Corrected_Pval <- wlcx_paired_res$p.value * num_datasets
Significant_value <- if(Corrected_Pval < 0.05) "TRUE" else "FALSE"
Contrast_table <- rbind(Contrast_table, data.frame(Set = set, P_Value = wlcx_paired_res$p.value, Adj_P_Value = Corrected_Pval,
Significant = Significant_value)) %>% arrange(desc(Adj_P_Value))
}
Contrast_agg_count_table <- Contrast_table %>% group_by(Significant) %>% dplyr::summarise(count = n())
kable(Contrast_agg_count_table)
graph_long_data <- Dif_table %>%
dplyr::select(starts_with("mean_dif")) %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value") %>%
filter(Value > 0)
plot2 <- ggplot(graph_long_data, aes(y = Value, x = Variable)) +
geom_boxplot(varwidth = T, alpha  = 0.25, outlier.colour = "red")+
coord_cartesian(ylim = c(0, 11)) +
scale_y_continuous(breaks = seq(0, 11, by = 2)) +
labs(x = "Set-of-Interest / Control-set Pair ", y = expression("Expression Difference" ~ (log[2])),
title = "NON-CANCEROUS: DISTRIBUTION OF THE SET-OF-INTEREST TO \n CONTROL-SET EXPRESSION DIFFERENCE ACROSS ALL PAIRINGS") +
theme(
plot.title = element_text(hjust = 0.5, size = 19),
plot.title.position = "plot",
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_blank(),
legend.position = "none",
panel.border = element_rect(fill = "transparent", color = "#9B30FF", linewidth = 2),
panel.grid.major.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.background = element_rect(fill = "white")
)
print(plot2)
# Loop over each of the control datasets in the folder.
# For each control-set perform a two-sided paired permutation test with the SOI.
# Save the pvalue for each test in a dataframe.
paired_tests_list <- list()
for (i in 1:num_datasets) {
ctrl <- paste("ctrl_geom_mean", i, sep ="")
permutation_res <- perm.test(Mean_table$soi_mean, Mean_table[[ctrl]], alternative = "two.sided", mu = 0,
paired = TRUE, all.perms = TRUE, num.sim = 1000, plot = FALSE, stat = mean)
pair <- paste("Pair", i, sep ="_")
pair_frame = data.frame(Pairing = pair, Pvalue = as.numeric(permutation_res$p.value), Corrected_Pval = as.numeric(p.adjust(permutation_res$p.value, method = "BH", n = num_datasets)))
paired_tests_list[[i]] <- pair_frame
}
# Correct the P-value due to multiple testing by using the BH method.
full_paired <- do.call(rbind, paired_tests_list) %>% arrange(desc(Pvalue))
kable(head(full_paired))
controls_names <- "soi_mean"
controls_names <- append(controls_names,  unlist(lapply(controls, function(i) paste("ctrl_geom_mean", i, sep =""))))
# Pivot the data into a form that can be used by boxplot.
long_data <- Mean_table %>%
select(all_of(controls_names)) %>%
pivot_longer( cols = everything(), names_to = "Variable", values_to = "Value")
# Extract control set numbers from the Pairing column in full_paired_wilc
# full_paired$Control_Num <- as.numeric(sub("Pair_", "", full_paired$Pairing))
#
# full_paired$Sig <- ifelse (full_paired$Corrected_Pval <= 0.001, "***",
#                            ifelse (full_paired$Corrected_Pval <= 0.01, "**",
#                                    ifelse (full_paired$Corrected_Pval <= 0.05, "*",
# "NS" )))
full_paired <- full_paired %>% mutate(Control_Num = as.numeric(sub("Pair_", "", full_paired$Pairing)),
Sig = ifelse (full_paired$Corrected_Pval <= 0.001, "***",
ifelse (full_paired$Corrected_Pval <= 0.01, "**",
ifelse (full_paired$Corrected_Pval <= 0.05, "*","NS"))))
# Create a new column in full_paired_wilc to match the Variable column in long_data
full_paired$Variable <- paste("ctrl_geom_mean", full_paired$Control_Num, sep="")
# Merge full_paired_wilc with long_data
merged_data <- merge(long_data, full_paired, by="Variable", all.x=TRUE)
# Reorder the Variable column in merged_data
# merged_data$Variable <- factor(merged_data$Variable, levels = desired_order)
# Define the specific comparisons
specific_comparisons <- list(
c(controls_names[1], controls_names[-1][1]),
c(controls_names[1], controls_names[-1][2]),
c(controls_names[1], controls_names[-1][3]),
c(controls_names[1], controls_names[-1][4]),
c(controls_names[1], controls_names[-1][5])
)
specific_comparisons_ordered <-  specific_comparisons[order(sapply(specific_comparisons, function(x) x[2]))]
# Extract corresponding p-values for these comparisons
specific_p_values <- sapply(specific_comparisons_ordered, function(comp) {
# Filter for rows where the Variable is either the SOI mean or the specific control
subset_data <- merged_data[merged_data$Variable %in% comp[2],]
# If there are multiple rows (as there should be for each pair), we take the unique p-value
unique_pval <- unique(subset_data$Sig)
# Return the unique p-value, or NA if not found
if (length(unique_pval) == 1) {
return(unique_pval)
} else {
return(NA)
}
})
RNA_dif <- ggplot(long_data, aes( y = Value, x = Variable)) +
geom_boxplot(outlier.colour = 2, fill = "#778899") +
stat_boxplot(geom = "errorbar") +
coord_cartesian(ylim = c(-8, 8)) +
theme_minimal() +
labs(title = "NON-CANCEROUS: DISTRIBUTION OF THE MEAN EXPRESSION \n IN THE SET-OF-INTEREST VS VARIOUS CONTROL-SETS",
y = expression("Expression" ~ (log[2])),) +
scale_x_discrete(labels = c("Control Set 118","Control Set 14","Control Set 179","Control Set 195","Control Set 306", "Set of Interest")) +
theme(
legend.position = "None",
axis.title.y = element_text(size= 19),
plot.subtitle = element_text(hjust= 0.5),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 17, angle = 0, vjust = 0.6),
axis.text.y = element_text(size = 17),
plot.title = element_text(hjust = 0.5,
size = 25),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color = "black", linewidth = 0.25, linetype = 2),
panel.grid.minor.y = element_line(color = "black", linewidth = 0.25, linetype = 2),
panel.border = element_rect(fill = "transparent",
color = "#9B30FF",
linewidth = 2)) +
geom_signif(comparisons = specific_comparisons_ordered,
annotations = specific_p_values,
step_increase = 0.04,
map_signif_level = TRUE,
textsize = 4.5,
tip_length = 0
)
print(RNA_dif)
main_ctrl_num <- controls[2]
file_name <- paste("Data/RNA_Data/TCGA_TPM/TCGA_Normal_CTRL_Sets/TCGA_Normal_mRNA_TPM_CTRL_Set", main_ctrl_num, ".csv", sep = "")
ctrl <- read.csv(file_name)
ctrl_sum1 <- calculate_summary(ctrl)
duo_table <- merge(soi_sum, ctrl_sum1 %>% select( ctrl_geom_mean), by = 0, all = FALSE) %>%
mutate(mean_dif = soi_geom_mean - ctrl_geom_mean,
TSS.Code = sapply(str_split(Row.names, "\\."), `[`, 2)) %>%
dplyr::rename(SAMPID = Row.names)
duo_table2 <- merge(duo_table, Meta_data[c("TSS.Code","Study.Name")],
by = "TSS.Code", all = FALSE)
RNA_TSS <- ggplot(duo_table2, aes(x = factor(SAMPID), y = mean_dif)) +
geom_col(alpha = 0.72, fill = "#9B30FF") +
theme_minimal() +
labs(y = expression("Expression Difference" ~ (log[2])),
x = "Samples",
title = "NON-CANCEROUS: EXPRESSION DIFFERENCE ACROSS SAMPLES BY TUMOUR SOURCE TYPE") +
theme(
axis.text.x = element_blank(),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 13),
axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
plot.title.position = "plot",
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color = "black", linewidth = 0.5, linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
axis.line = element_line(linewidth = 0.35, linetype = "solid", colour = "black"),
panel.border = element_rect(fill = "transparent", color = 1, linewidth = 1),
strip.text = element_text(size = 12)) +
guides(fill = guide_legend(ncol = 8, title = "Source Tissue Type", title.position = "top")) +
facet_wrap(~Study.Name, ncol = 4, scales = "free_x", labeller = labeller(Study = function(label) label))
print(RNA_TSS)
# Get unique values of 'Tissue Type' for grouping
unique_Study <- unique(duo_table2$Study.Name)
# Initialize a df to store the test results
Results_table <- data.frame(Study = character(0), P_Value = numeric(0), Adj_P_Value = numeric(0), Significant_value= character(0), mean_dif = numeric(0))
# Loop through each unique value of 'Tissue Type'
for (i in 1:length(unique_Study)) {
current_Study <- unique_Study[i]
# Subset the data for the current group
subset_data <- duo_table2[duo_table2$Study.Name == current_Study, ]
# Perform the paired permutation test for the current group
test_result <- perm.test(subset_data$soi_geom_mean, subset_data$ctrl_geom_mean,
alternative = "two.sided", mu = 0, paired = TRUE,
all.perms = TRUE, num.sim = 10000, plot = FALSE, stat = mean)
# Correct the p_value using the Benjamini Hochberg correction method
Corrected_Pval <- p.adjust(test_result$p.value, method = "BH", n = length(unique_Study))
Significant_val <- if(Corrected_Pval < 0.05) "TRUE" else "FALSE"
# Calculate the mean Expression value per group
mean_dif <- mean(subset_data$mean_dif)
# Store the result in  'Results_table'
Results_table <- rbind(Results_table, data.frame(Study = current_Study, P_Value = test_result$p.value, Adj_P_Value = Corrected_Pval,
Significant_value  = Significant_val, mean_dif = mean_dif)) %>% arrange(desc(mean_dif))
}
ggplot(Results_table, aes(x = Study, y = mean_dif)) +
geom_bar(stat = "identity", fill = "#9B30FF") +
theme_minimal() +
labs(title = "Average Expression Difference in Set-of-Interest vs control gene-set",
y = "Mean Log2 Expression Difference")+
theme(
axis.title = element_text(size = 13),
axis.text.x = element_text(angle = 90),
plot.title = element_text(hjust = 0.5,
size = 16),
panel.grid.major = element_line(color = "black",
linewidth = 0.5,
linetype = 1),
panel.grid.minor = element_line(color = "black",
linewidth = 0.2,
linetype = 1),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = "transparent",
color = 1,
linewidth = 2))
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
# Calculate column means
means <- colMeans(input_dataframe[, -c(1, 2)], na.rm = TRUE)
# Create a new dataframe to store the summary
summary_dataframe <- data.frame(Mean = means)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(summary_dataframe)[colnames(summary_dataframe) == "Mean"] <-
paste0("geom_mean_", prefix)
return(summary_dataframe)
}
soi_combo <- merge(calculate_summary(soi_nrm) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
calculate_summary(soi_can) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
by = "Participant",
all = FALSE,
suffixes = c("_nrm", "_can"))
soi_combo <- soi_combo %>%
dplyr::rename(geom_mean_nrm_soi = geom_mean_soi_nrm,
geom_mean_can_soi = geom_mean_soi_can)
data <- soi_combo %>%
tidyr::gather(key = "Condition",
value = "Geom_mean", geom_mean_nrm_soi, geom_mean_can_soi)
print(head(data, n = 15))
soi_combo$dif <- soi_combo$geom_mean_can_soi - soi_combo$geom_mean_nrm_soi
ggplot(soi_combo, aes(x = "", y = soi_combo$dif)) +
stat_boxplot(geom = "errorbar",
width = 0.15) +
geom_boxplot()
describe(soi_combo)
bxp <- ggpaired(data, x = "Condition", y = "Geom_mean",
id = "Participant",
order = c("geom_mean_nrm_soi", "geom_mean_can_soi"),
ylab = "Geom_mean", xlab = "Condition",
color = "Condition",
linetype = 0,
line.size = 0.02,
line.color = "grey35",
ggtheme = theme_classic(), palette = "lancet") +
geom_line(data = subset(
data, Participant %in% sample(unique(data$Participant), 15)
),
aes(group = Participant),
color = "purple",
linetype = 2)
bxp
stat_test <- data  %>%
wilcox_test(Geom_mean ~ Condition, paired = TRUE, alternative = "greater") %>%
add_significance()
stat_test
observed_val <- stat_test$p
all_combos <- soi_combo
results <- list()
for (i in 1:num_datasets) {
can_ctrl_file <- paste(
"Data/RNA_Data/TCGA_TPM/TCGA_Cancer_CTRL_Sets/TCGA_TPM_RNA_Control_df", i,
".csv", sep = ""
)
can_ctrl_set <- read.csv(can_ctrl_file)
nrm_ctrl_file <- paste(
"Data/RNA_Data/TCGA_TPM/TCGA_Normal_CTRL_Sets/TCGA_Normal_mRNA_TPM_CTRL_Set", # nolint: line_length_linter.
i,
".csv", sep = ""
)
nrm_ctrl_set <- read.csv(nrm_ctrl_file)
new_combo <- merge(calculate_summary(nrm_ctrl_set) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
calculate_summary(can_ctrl_set) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
by = "Participant",
all = FALSE
)
new_combo <- new_combo %>%
dplyr::mutate( dif = geom_mean_can - geom_mean_nrm) %>%
dplyr::rename(
!!paste0("geom_mean_nrm_", i) := geom_mean_nrm,
!!paste0("geom_mean_can_", i) := geom_mean_can,
!!paste0("dif_", i) := dif
)
all_combos <- all_combos %>% merge(new_combo,
by = "Participant",
all = FALSE
)
new_data <- new_combo %>%
gather(key = "Condition", value = "Geom_mean", 2, 3)
new_stat_res <- new_data  %>%
wilcox_test(Geom_mean ~ Condition, paired = TRUE, alternative = "less") %>%
add_significance()
results[[i]] <- new_stat_res
}
all_combos <- all_combos %>%
dplyr::rename(geom_mean_nrm_soi = geom_mean_nrm_soi,
geom_mean_can_soi = geom_mean_can_soi,
dif_soi = dif
)
partial_results <- do.call(rbind, results)
partial_results <- rbind(partial_results, stat_test)
full_results <- mutate(
partial_results, Adjusted_p = p.adjust(partial_results$p, method = "BH"),
significant_value = ifelse(Adjusted_p < 0.05, "TRUE", "FALSE"),
greater_or_equal = ifelse(Adjusted_p <= observed_val, "TRUE", "FALSE"),
similar_level = ifelse(p.signif == "****", "TRUE", "FALSE")
)
#
kable(head(full_results))
contrast_agg_count_table <- full_results[,c("significant_value","greater_or_equal","similar_level")]
summary_table <- contrast_agg_count_table %>%
dplyr::reframe(across(everything(),
~ list("TRUE" = sum(. == "TRUE"), "FALSE" = sum(. == "FALSE"))))
summary_table <- as.data.frame(t(summary_table))%>%
mutate(Percent_TRUE = round(as.numeric(V1) / (as.numeric(V1) + as.numeric(V2)), 3),
Fract = paste(V1, "/", as.numeric(V1) + as.numeric(V2))) %>%
dplyr::rename("TRUE" = V1,
"FALSE" = V2)
kable(summary_table)
set.seed(123)
numbers_list <- seq(1, num_datasets)
names <- c("Participant",
"geom_mean_nrm_soi",
"geom_mean_can_soi",
unlist(lapply(controls, function(i) paste("geom_mean_nrm", i, sep = "_"))),
unlist(lapply(controls, function(i) paste("geom_mean_can", i, sep = "_")))
)
select_combos <- all_combos %>% dplyr::select(c(names))
box_pivot_combos <- select_combos %>%
pivot_longer(!Participant, names_to = "set", values_to = "Expression") %>%
mutate(type = if_else(grepl("can", set), "Cancerous", "Normal"),
set_group = sub(".*_", "", set))
bxp2 <- ggpaired(box_pivot_combos, x = "type", y = "Expression",
id = "Participant",
order = c("Normal", "Cancerous"),
ylab = "Expression", xlab = "Condition",
color = "type",
linetype = 0,
line.size = 1,
line.color = "purple",
ggtheme = theme_classic(), palette = "lancet") +
facet_wrap(~set_group, ncol = 6, scales = "free_y") +
geom_line(data = subset(
box_pivot_combos, Participant %in% sample(unique(box_pivot_combos$Participant), 9)
),
aes(group = Participant),
color = "grey50",
linetype = 2
)
bxp2
names2 <- c(
"dif_soi",
unlist(lapply(numbers_list, function(i) paste("dif", i, sep = "_")))
)
select_combos2 <- all_combos %>% dplyr::select(all_of(names2))
pivot_main <- select_combos2 %>%
pivot_longer(cols = everything(), names_to = "group", values_to = "Log2FC") %>%
group_by(group) %>%
summarise_at(vars("Log2FC"), list(mean_log2fc = mean, std_log2fc = sd))%>%
mutate(set = sub(".*_", "", group))
summary_pivot <- merge(pivot_main %>%
select(-c("group")),
full_results %>%
mutate( set = sub(".*_", "", group1)) %>%
select(c("set", "Adjusted_p")),
by = "set",
all = FALSE
)
p2 <- ggplot(data=summary_pivot, aes(x=mean_log2fc, y=-log10(Adjusted_p))) +
geom_point(aes(size = std_log2fc), color = "grey50", fill = "grey50", alpha = 0.1) +
geom_point(color = "black") +
theme_minimal() +
geom_hline(yintercept=-log10(0.05), col="red") +
geom_point(data = subset(
summary_pivot, set == "soi"),
aes(group = set),
color = "red",
size = 3,
shape = 1
)+
theme(legend.position = "none") +
geom_text(data = subset(summary_pivot, set == "soi"),
label = "Set of Interest",
hjust = 1, vjust = 2, color = "red", size = 4)
p2
knitr::opts_knit$set(root.dir =
"/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project"
)
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
# Calculate column means
means <- colMeans(input_dataframe[, -c(1, 2)], na.rm = TRUE)
# Create a new dataframe to store the summary
summary_dataframe <- data.frame(Mean = means)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(summary_dataframe)[colnames(summary_dataframe) == "Mean"] <-
paste0("geom_mean_", prefix)
return(summary_dataframe)
}
knitr::opts_knit$set(root.dir =
"/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project"
)
library(ggplot2)
library(knitr)
library(dplyr)
library(tidyr)
library(plyr)
library(coin)
library(rstatix)
library(ggpubr)
library(GGally)
library(tidyverse)
library(psych)
library(ggsci)
options(width = 120, max.print = 1000)
set.seed(123)
soi_nrm <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_Normal_mRNA_TPM_SOI.csv")
soi_can <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
meta_data <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
# Calculate column means
means <- colMeans(input_dataframe[, -c(1, 2)], na.rm = TRUE)
# Create a new dataframe to store the summary
summary_dataframe <- data.frame(Mean = means)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(summary_dataframe)[colnames(summary_dataframe) == "Mean"] <-
paste0("geom_mean_", prefix)
return(summary_dataframe)
}
soi_combo <- merge(calculate_summary(soi_nrm) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
calculate_summary(soi_can) %>%
rownames_to_column(var = "id") %>%
rowwise() %>%
mutate(Participant = strsplit(id, "\\.")[[1]][3]) %>%
select(-c("id")),
by = "Participant",
all = FALSE,
suffixes = c("_nrm", "_can"))
soi_combo <- soi_combo %>%
dplyr::rename(geom_mean_nrm_soi = geom_mean_soi_nrm,
geom_mean_can_soi = geom_mean_soi_can)
View(soi_combo)
