select(SampleID, TSS_Code, Participant_Code, Sample_Code)
Sample_meta <- Sample_meta %>% select(Sample_ID, everything()) %>%merge(TSS_Meta_data[c("TSS.Code", "Study.Name")], by.x = "TSS_Code",by.y = "TSS.Code", all.x = TRUE) %>% merge(SampleType_Meta_data[c("Code", "Definition")], by.x = "Sample_Code",by.y = "Code", all.x = TRUE)
Sample_meta <- SOI_TPM %>%
rowwise %>%
mutate(TSS_Code = str_split(SampleID, "-")[[1]][2],
Participant_Code = str_split(SampleID, "-")[[1]][3],
Sample_Code = as.integer( str_split(SampleID, "-")[[1]][4])) %>%
select(SampleID, TSS_Code, Participant_Code, Sample_Code)
Sample_meta <- Sample_meta %>% select(SampleID, everything()) %>%merge(TSS_Meta_data[c("TSS.Code", "Study.Name")], by.x = "TSS_Code",by.y = "TSS.Code", all.x = TRUE) %>% merge(SampleType_Meta_data[c("Code", "Definition")], by.x = "Sample_Code",by.y = "Code", all.x = TRUE)
value_counts <- Sample_meta %>% count(Definition)
print(value_counts)
Sample_meta <- SOI_TPM %>%
rowwise %>%
mutate(TSS_Code = str_split(SampleID, "-")[[1]][2],
Participant_Code = str_split(SampleID, "-")[[1]][3],
Sample_Code = as.integer( str_split(SampleID, "-")[[1]][4])) %>%
select(SampleID, TSS_Code, Participant_Code, Sample_Code)
Sample_meta <- Sample_meta %>% select(SampleID, everything()) %>%merge(TSS_Meta_data[c("TSS.Code", "Study.Name")], by.x = "TSS_Code",by.y = "TSS.Code", all.x = TRUE) %>% merge(SampleType_Meta_data[c("Code", "Definition")], by.x = "Sample_Code",by.y = "Code", all.x = TRUE)
value_counts <- Sample_meta %>% count(Definition)
print(value_counts)
Sample_meta <- SOI_TPM %>%
rowwise %>%
mutate(TSS_Code = str_split(SampleID, "-")[[1]][2],
Participant_Code = str_split(SampleID, "-")[[1]][3],
Sample_Code = as.integer( str_split(SampleID, "-")[[1]][4])) %>%
select(SampleID, TSS_Code, Participant_Code, Sample_Code)
Sample_meta <- Sample_meta %>% merge(TSS_Meta_data[c("TSS.Code", "Study.Name")], by.x = "TSS_Code",by.y = "TSS.Code", all.x = TRUE) %>% merge(SampleType_Meta_data[c("Code", "Definition")], by.x = "Sample_Code",by.y = "Code", all.x = TRUE) %>% select(SampleID, everything())
value_counts <- Sample_meta %>% count(Definition)
print(value_counts)
View(SOI_TPM)
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
cols_to_log <- names(input_dataframe)[-1]
Logs_Dataframe <- input_dataframe %>%
mutate(across(.cols = cols_to_log, .fns = ~log2(. + 0.001), .names = "log2_{.col}")) %>%
select(1, starts_with("log2_"))
Summary_Dataframe <- Logs_Dataframe %>%
mutate(geom_mean = rowMeans(select(., -1), na.rm = TRUE),
medians = apply(select(., -1), 1, median, na.rm = TRUE)) %>%
select(SampleID, geom_mean, medians)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "geom_mean"] <- paste0(prefix, "_geom_mean")
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "medians"] <- paste0(prefix, "_medians")
return(Summary_Dataframe)
}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(broom)
library(knitr)
library(coin)
library(ggpubr)
library(rstatix)
library(tidyverse)
library(jmuOutlier)
library(paletteer)
getOption("max.print")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Healthy/GTEx_RNA_SOI.csv")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Healthy/GTEx_RNA_TPM_SOI.csv")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM_Healthy/GTEx_RNA_TPM_SOI.csv")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM_Healthy/GTEx_RNA_TPM_SoI.csv")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/GTEx_RNA_TPM_SoI.csv")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/GTEx_RNA_TPM_SoI.csv")
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(broom)
library(knitr)
library(coin)
library(ggpubr)
library(rstatix)
library(tidyverse)
library(jmuOutlier)
library(paletteer)
getOption("max.print")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/GTEx_RNA_TPM_SoI.csv")
Meta_data_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(broom)
library(knitr)
library(coin)
library(ggpubr)
library(rstatix)
library(tidyverse)
library(jmuOutlier)
library(paletteer)
getOption("max.print")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/GTEx_RNA_TPM_SoI.csv")
Meta_data_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
cols_to_log <- names(input_dataframe)[-1]
Logs_Dataframe <- input_dataframe %>%
mutate(across(.cols = cols_to_log, .fns = ~log2(. + 0.001), .names = "log2_{.col}")) %>%
select(1, starts_with("log2_"))
Summary_Dataframe <- Logs_Dataframe %>%
mutate(geom_mean = rowMeans(select(., -1), na.rm = TRUE),
medians = apply(select(., -1), 1, median, na.rm = TRUE)) %>%
select(SampleID, geom_mean, medians)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "geom_mean"] <- paste0(prefix, "_geom_mean")
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "medians"] <- paste0(prefix, "_medians")
return(Summary_Dataframe)
}
SOI_summary <- calculate_summary(SOI_Healthy)
# Create a table that contains the means of all the groups
Means_table <- SOI_summary[,-3]
# Create a table that contains all the SOI-Control_set differences for each of the controls sets
Dif_table <- data.frame(SampleID = SOI_summary$SampleID)
# Loop over the datasets
num_datasets <- 12
for (i in 1:num_datasets) {
start_time <- Sys.time()
ctrl_file <- paste("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Healthy/Controls/GTEx_Control_RNA_Data_df", i, ".csv", sep = "")
ctrl_set <- read.csv(ctrl_file)
ctrl_set_summary <- merge(calculate_summary(ctrl_set), SOI_summary, by = "SampleID", all = FALSE, suffixes = c("", i))
ctrl_set_summary <- ctrl_set_summary %>% mutate(mean_dif = SOI_geom_mean - ctrl_geom_mean  ,
median_dif = SOI_medians - ctrl_medians)
Dif_table <- merge(Dif_table, ctrl_set_summary %>% select(SampleID , mean_dif, median_dif),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
Means_table <- merge(Means_table, ctrl_set_summary %>% select(SampleID , ctrl_geom_mean),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
end_time <- Sys.time()
cat('\n',i,"th iteration duration: ", end_time - start_time, "seconds")
}
SOI_summary <- calculate_summary(SOI_Healthy)
# Create a table that contains the means of all the groups
Means_table <- SOI_summary[,-3]
# Create a table that contains all the SOI-Control_set differences for each of the controls sets
Dif_table <- data.frame(SampleID = SOI_summary$SampleID)
# Loop over the datasets
num_datasets <- 12
for (i in 1:num_datasets) {
start_time <- Sys.time()
ctrl_file <- paste("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/Controls/GTEx_Control_RNA_Data_df", i, ".csv", sep = "")
ctrl_set <- read.csv(ctrl_file)
ctrl_set_summary <- merge(calculate_summary(ctrl_set), SOI_summary, by = "SampleID", all = FALSE, suffixes = c("", i))
ctrl_set_summary <- ctrl_set_summary %>% mutate(mean_dif = SOI_geom_mean - ctrl_geom_mean  ,
median_dif = SOI_medians - ctrl_medians)
Dif_table <- merge(Dif_table, ctrl_set_summary %>% select(SampleID , mean_dif, median_dif),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
Means_table <- merge(Means_table, ctrl_set_summary %>% select(SampleID , ctrl_geom_mean),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
end_time <- Sys.time()
cat('\n',i,"th iteration duration: ", end_time - start_time, "seconds")
}
Dif_table <- Dif_table %>%  rename(mean_dif1 = mean_dif,
median_dif1 = median_dif)
Means_table <- Means_table %>%  rename(ctrl_geom_mean1 = ctrl_geom_mean)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(broom)
library(knitr)
library(coin)
library(ggpubr)
library(rstatix)
library(tidyverse)
library(jmuOutlier)
library(paletteer)
getOption("max.print")
set.seed(123)
SOI_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/GTEx_RNA_TPM_SoI.csv")
Meta_data_Healthy <- read.csv("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
calculate_summary <- function(input_dataframe) {
df_name <- deparse(substitute(input_dataframe))
cols_to_log <- names(input_dataframe)[-1]
Logs_Dataframe <- input_dataframe %>%
mutate(across(.cols = cols_to_log, .fns = ~log2(. + 0.001), .names = "log2_{.col}")) %>%
select(1, starts_with("log2_"))
Summary_Dataframe <- Logs_Dataframe %>%
mutate(geom_mean = rowMeans(select(., -1), na.rm = TRUE),
medians = apply(select(., -1), 1, median, na.rm = TRUE)) %>%
select(SampleID, geom_mean, medians)
prefix <- sub("^(.*?)_.*$", "\\1", df_name)
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "geom_mean"] <- paste0(prefix, "_geom_mean")
colnames(Summary_Dataframe)[colnames(Summary_Dataframe) == "medians"] <- paste0(prefix, "_medians")
return(Summary_Dataframe)
}
SOI_summary <- calculate_summary(SOI_Healthy)
# Create a table that contains the means of all the groups
Means_table <- SOI_summary[,-3]
# Create a table that contains all the SOI-Control_set differences for each of the controls sets
Dif_table <- data.frame(SampleID = SOI_summary$SampleID)
# Loop over the datasets
num_datasets <- 25
for (i in 1:num_datasets) {
start_time <- Sys.time()
ctrl_file <- paste("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/Controls/GTEx_Control_RNA_Data_df", i, ".csv", sep = "")
ctrl_set <- read.csv(ctrl_file)
ctrl_set_summary <- merge(calculate_summary(ctrl_set), SOI_summary, by = "SampleID", all = FALSE, suffixes = c("", i))
ctrl_set_summary <- ctrl_set_summary %>% mutate(mean_dif = SOI_geom_mean - ctrl_geom_mean  ,
median_dif = SOI_medians - ctrl_medians)
Dif_table <- merge(Dif_table, ctrl_set_summary %>% select(SampleID , mean_dif, median_dif),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
Means_table <- merge(Means_table, ctrl_set_summary %>% select(SampleID , ctrl_geom_mean),
by = "SampleID", all = FALSE, suffixes = c("", i)
)
end_time <- Sys.time()
cat('\n',i,"th iteration duration: ", end_time - start_time, "seconds")
}
Dif_table <- Dif_table %>%  rename(mean_dif1 = mean_dif,
median_dif1 = median_dif)
Means_table <- Means_table %>%  rename(ctrl_geom_mean1 = ctrl_geom_mean)
controls <- sample(1:num_datasets, 5)
dif_pairing_names <- unlist(lapply(controls, function(i) paste("mean_dif", i, sep ="")))
violin_graph_long_data <- Dif_table[dif_pairing_names] %>%
pivot_longer(cols = dif_pairing_names,
names_to = "Variable",
values_to = "Value")
ggplot(violin_graph_long_data, aes(y = Value, x = Variable)) +
geom_violin(trim = FALSE, fill = "gray88")+
geom_boxplot(varwidth = T, alpha  = 0.25, outlier.colour = "red")+
labs(x = "Unique SOI to Control-set Pairings ", y = expression("Δ Expression" ~ (log[2])),
title = "Distribution of the Set-of-Interest to Control Gene-Set \n  Expression Difference Across Various Pairings") +
theme(
legend.position = "none",
axis.title = element_text(size = 13, color = "black"),
axis.text = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
panel.background = element_rect(fill = "white"),
legend.text = element_blank(),
plot.title = element_text(hjust = 0.6, size = 15),
panel.border = element_rect(fill = "transparent", color = 1, linewidth = 1),
panel.grid.major.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
plot.title.position = "plot"
)
Fried_test_data <- Dif_table %>%
gather(key = "Pairing", value = "Difference", starts_with("mean")) %>%
mutate(Sample = as.factor(SampleID), Pairing = as.factor(Pairing)) %>%
select(Sample, Pairing, Difference)
friedman_result <- coin::friedman_test(Difference ~ Pairing | Sample, data = Fried_test_data)
print(friedman_result)
Paired_wilc_table <- Dif_table %>%
select(starts_with("mean_dif")) %>%
mutate_all(as.numeric)
Contrast_table <- data.frame(Set = character(0), P_Value = numeric(0), Adj_P_Value = numeric(0), Significant = character(0))
# Loop over each control gene-sets
for (i in 1:num_datasets) {
set = paste('mean_dif', i, sep = "")
Global_table <- Paired_wilc_table %>%
mutate(global = rowMeans(select(., -set), na.rm = TRUE)) %>%
select(set, global)
wlcx_paired_res <- wilcox.test(Global_table[[set]], Global_table$global, paired = TRUE)
Corrected_Pval <- wlcx_paired_res$p.value * num_datasets
Significant_value <- if(Corrected_Pval < 0.05) "TRUE" else "FALSE"
Contrast_table <- rbind(Contrast_table, data.frame(Set = set, P_Value = wlcx_paired_res$p.value, Adj_P_Value = Corrected_Pval,
Significant = Significant_value)) %>% arrange(desc(Adj_P_Value))
}
Contrast_agg_count_table <- Contrast_table %>% group_by(Significant) %>% summarise(count = n())
print(Contrast_agg_count_table)
graph_long_data <- Dif_table %>%
dplyr::select(starts_with("mean_dif")) %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
ggplot(graph_long_data, aes(y = Value, x = Variable)) +
geom_boxplot(varwidth = T, alpha  = 0.25, outlier.colour = "red")+
coord_cartesian(ylim = c(0, 6)) +
scale_y_continuous() +
labs(x = "Unique SOI / Control Pairings ", y = "Δ Log2 Expression",
title = "Distribution of the Set-of-Interest to Control gene-set \n Log2 Expression Difference Across All Pairings") +
theme(
plot.title = element_text(hjust = 0.6, size = 15),
plot.title.position = "plot",
axis.title = element_text(size = 13, color = "black", face = "bold"),
axis.text = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_blank(),
legend.position = "none",
panel.border = element_rect(fill = "transparent", color = 1, linewidth = 1),
panel.grid.major.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_line(color = "black", linewidth = 0.1, linetype = 2),
panel.background = element_rect(fill = "#EDEDED")
)
# Loop over each of the control datasets in the folder.
# For each control-set perform a two-sided paired permutation test with the SOI.
# Save the pvalue for each test in a dataframe.
paired_tests_list <- list()
for (i in 1:num_datasets) {
ctrl <- paste("ctrl_geom_mean", i, sep ="")
permutation_res <- perm.test(Means_table$SOI_geom_mean, Means_table[[ctrl]], alternative = "two.sided", mu = 0,
paired = TRUE, all.perms = TRUE, num.sim = 10000, plot = FALSE, stat = mean)
pair <- paste("Pair", i, sep ="_")
pair_frame = data.frame(Pairing = pair, Pvalue = as.numeric(permutation_res$p.value), Corrected_Pval = as.numeric(p.adjust(permutation_res$p.value, method = "BH", n = num_datasets)))
paired_tests_list[[i]] <- pair_frame
}
# Correct the P-value due to multiple testing by using the BH method.
full_paired <- do.call(rbind, paired_tests_list) %>% arrange(desc(Pvalue))
print(head(full_paired))
controls_names <- "SOI_geom_mean"
controls_names <- append(controls_names,  unlist(lapply(controls, function(i) paste("ctrl_geom_mean", i, sep =""))))
# Pivot the data into a form that can be used by boxplot.
long_data <- Means_table %>%
select(all_of(controls_names)) %>%
pivot_longer( cols = everything(), names_to = "Variable", values_to = "Value")
# Extract control set numbers from the Pairing column in full_paired_wilc
# full_paired$Control_Num <- as.numeric(sub("Pair_", "", full_paired$Pairing))
#
# full_paired$Sig <- ifelse (full_paired$Corrected_Pval <= 0.001, "***",
#                            ifelse (full_paired$Corrected_Pval <= 0.01, "**",
#                                    ifelse (full_paired$Corrected_Pval <= 0.05, "*",
# "NS" )))
full_paired <- full_paired %>% mutate(Control_Num = as.numeric(sub("Pair_", "", full_paired$Pairing)),
Sig = ifelse (full_paired$Corrected_Pval <= 0.001, "***",
ifelse (full_paired$Corrected_Pval <= 0.01, "**",
ifelse (full_paired$Corrected_Pval <= 0.05, "*","NS"))))
# Create a new column in full_paired_wilc to match the Variable column in long_data
full_paired$Variable <- paste("ctrl_geom_mean", full_paired$Control_Num, sep="")
# Merge full_paired_wilc with long_data
merged_data <- merge(long_data, full_paired, by="Variable", all.x=TRUE)
# Reorder the Variable column in merged_data
# merged_data$Variable <- factor(merged_data$Variable, levels = desired_order)
# Define the specific comparisons
specific_comparisons <- list(
c(controls_names[1], controls_names[-1][1]),
c(controls_names[1], controls_names[-1][2]),
c(controls_names[1], controls_names[-1][3]),
c(controls_names[1], controls_names[-1][4]),
c(controls_names[1], controls_names[-1][5])
)
specific_comparisons_ordered <-  specific_comparisons[order(sapply(specific_comparisons, function(x) x[2]))]
# Extract corresponding p-values for these comparisons
specific_p_values <- sapply(specific_comparisons_ordered, function(comp) {
# Filter for rows where the Variable is either the SOI mean or the specific control
subset_data <- merged_data[merged_data$Variable %in% comp[2],]
# If there are multiple rows (as there should be for each pair), we take the unique p-value
unique_pval <- unique(subset_data$Sig)
# Return the unique p-value, or NA if not found
if (length(unique_pval) == 1) {
return(unique_pval)
} else {
return(NA)
}
})
RNA_dif <- ggplot(long_data, aes( y = Value, x = Variable)) +
geom_boxplot(outlier.colour = 2, fill = "gray88") +
stat_boxplot(geom = "errorbar") +
theme_minimal() +
labs(title = "DISTRIBUTION OF THE MEAN EXPRESSION IN THE SET-OF-INTEREST VS VARIOUS CONTROL-SETS",
y = expression("Expression" ~ (log[2])),) +
scale_x_discrete(labels = c("Control Set 118","Control Set 14","Control Set 179","Control Set 195","Control Set 306", "Set of Interest")) +
theme(
legend.position = "None",
axis.title.y = element_text(size= 20),
plot.subtitle = element_text(hjust= 0.5),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 17, angle = 45, vjust = 0.6),
axis.text.y = element_text(size = 17),
plot.title = element_text(hjust = 0.5,
size = 25),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color = "black", linewidth = 0.25, linetype = 2),
panel.border = element_rect(fill = "transparent",
color = 1,
linewidth = 2)) +
geom_signif(comparisons = specific_comparisons_ordered,
annotations = specific_p_values,
step_increase = 0.09,
map_signif_level = TRUE,
textsize = 5.5,
tip_length = 0
)
print(RNA_dif)
main_ctrl_num <- controls[2]
file_name <- paste("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Healthy/Controls/GTEx_Control_RNA_Data_df", main_ctrl_num, ".csv", sep = "")
ctrl <- read.csv(file_name)
main_ctrl_num <- controls[2]
file_name <- paste("Data/RNA_Data/GTEx_RNA/GTEx_RNA_TPM/Controls/GTEx_Control_RNA_Data_df", main_ctrl_num, ".csv", sep = "")
ctrl <- read.csv(file_name)
duo_table <- merge(SOI_summary[1:2], calculate_summary(ctrl) %>% select(SampleID , ctrl_geom_mean),
by = "SampleID", all = FALSE) %>% mutate(mean_dif = SOI_geom_mean - ctrl_geom_mean)
duo_table <- merge( duo_table, Meta_data_Healthy[c("SAMPID", "SMTS", "SMTSD")],
by.x = "SampleID",by.y = "SAMPID", , all = FALSE)
RNA_SMTS <- ggplot(duo_table, aes(x = SampleID, y = mean_dif)) +
geom_col(alpha = 0.72, fill = "#00688B") +
theme_minimal() +
labs(y = expression("Expression Δ" ~ (log[2])),
x = "Samples",
title = "EXPRESSION DIFFERENCE ACROSS SAMPLES BY TISSUE TYPE") +
theme(
axis.text.x = element_blank(),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 13),
axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5, size = 23),
plot.title.position = "plot",
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color = "black", linewidth = 0.5, linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
axis.line = element_line(linewidth = 0.35, linetype = "solid", colour = "black"),
panel.border = element_rect(fill = "transparent", color = 1, linewidth = 1),
strip.text = element_text(size = 12)) +
guides(fill = guide_legend(ncol = 8, title = "Source Tissue Type", title.position = "top")) +
facet_wrap(~SMTS, ncol = 4, scales = "free_x", labeller = labeller(SMTS = function(label) label))
print(RNA_SMTS)
RNA_SMTS <- ggplot(duo_table, aes(x = SampleID, y = mean_dif)) +
geom_col(alpha = 0.72, fill = "#00688B") +
theme_minimal() +
labs(y = expression("Expression Δ" ~ (log[2])),
x = "Samples",
title = "EXPRESSION DIFFERENCE ACROSS SAMPLES BY TISSUE TYPE") +
theme(
axis.text.x = element_blank(),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 13),
axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5, size = 23),
plot.title.position = "plot",
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color = "black", linewidth = 0.5, linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
axis.line = element_line(linewidth = 0.35, linetype = "solid", colour = "black"),
panel.border = element_rect(fill = "transparent", color = 1, linewidth = 1),
strip.text = element_text(size = 12)) +
guides(fill = guide_legend(ncol = 8, title = "Source Tissue Type", title.position = "top")) +
facet_wrap(~SMTSD, ncol = 4, scales = "free_x", labeller = labeller(SMTS = function(label) label))
print(RNA_SMTS)
# my_palette <- paletteer_d("colorBlindness::paletteMartin")
# duo_table <- duo_table %>%
#   mutate( SampleID = factor(SampleID, levels = SampleID[order(SMTSD)]))
# Get unique values of 'Tissue Type' for grouping
unique_SMTS <- unique(main_data$SMTS_Abbrvs)
# Get unique values of 'Tissue Type' for grouping
unique_SMTS <- unique(duo_table$SMTS_Abbrvs)
# Initialize a df to store the test results
Results_table <- data.frame(SMTS = character(0), P_Value = numeric(0), Adj_P_Value = numeric(0), Significant_value= character(0), mean_dif = numeric(0))
# Loop through each unique value of 'Tissue Type'
for (i in 1:length(unique_SMTS)) {
current_SMTS <- unique_SMTS[i]
# Subset the data for the current group
subset_data <- main_data[main_data$SMTS_Abbrvs == current_SMTS, ]
# Perform the paired permutation test for the current group
test_result <- perm.test(subset_data$Mean_set, subset_data$Mean_ctrl,
alternative = "two.sided", mu = 0, paired = TRUE,
all.perms = TRUE, num.sim = 10000, plot = FALSE, stat = mean)
# Correct the p_value using the Benjamini Hochberg correction method
Corrected_Pval <- p.adjust(test_result$p.value, method = "BH", n = length(unique_SMTS))
Significant_val <- if(Corrected_Pval < 0.05) "TRUE" else "FALSE"
# Calculate the mean Expression value per group
mean_dif <- mean(subset_data$Mean_dif)
# Store the result in  'Results_table'
Results_table <- rbind(Results_table, data.frame(SMTS = current_SMTS, P_Value = test_result$p.value, Adj_P_Value = Corrected_Pval,
Significant_value  = Significant_val, mean_dif = mean_dif)) %>% arrange(desc(mean_dif))
}
View(duo_table)
# Get unique values of 'Tissue Type' for grouping
unique_SMTS <- unique(duo_table$SMTS_Abbrvs)
# Initialize a df to store the test results
Results_table <- data.frame(SMTS = character(0), P_Value = numeric(0), Adj_P_Value = numeric(0), Significant_value= character(0), mean_dif = numeric(0))
# Loop through each unique value of 'Tissue Type'
for (i in 1:length(unique_SMTS)) {
current_SMTS <- unique_SMTS[i]
# Subset the data for the current group
subset_data <- duo_table[duo_table$SMTS_Abbrvs == current_SMTS, ]
# Perform the paired permutation test for the current group
test_result <- perm.test(subset_data$Mean_set, subset_data$Mean_ctrl,
alternative = "two.sided", mu = 0, paired = TRUE,
all.perms = TRUE, num.sim = 10000, plot = FALSE, stat = mean)
# Correct the p_value using the Benjamini Hochberg correction method
Corrected_Pval <- p.adjust(test_result$p.value, method = "BH", n = length(unique_SMTS))
Significant_val <- if(Corrected_Pval < 0.05) "TRUE" else "FALSE"
# Calculate the mean Expression value per group
mean_dif <- mean(subset_data$Mean_dif)
# Store the result in  'Results_table'
Results_table <- rbind(Results_table, data.frame(SMTS = current_SMTS, P_Value = test_result$p.value, Adj_P_Value = Corrected_Pval,
Significant_value  = Significant_val, mean_dif = mean_dif)) %>% arrange(desc(mean_dif))
}
ggplot(Results_table, aes(x = SMTS, y = mean_dif)) +
geom_bar(stat = "identity", fill = "gray47") +
theme_minimal() +
labs(title = "Average Expression Difference in Set-of-Interest vs control gene-set",
y = "Mean Log2 Expression Difference")+
theme(
axis.title = element_text(size = 13),
axis.text.x = element_text(angle = 90),
plot.title = element_text(hjust = 0.5,
size = 16),
panel.grid.major = element_line(color = "black",
linewidth = 0.5,
linetype = 1),
panel.grid.minor = element_line(color = "black",
linewidth = 0.2,
linetype = 1),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = "transparent",
color = 1,
linewidth = 2))
View(SOI_Healthy)
View(Meta_data_Healthy)
View(SOI_summary)
View(Dif_table)
source("~/.active-rstudio-document", echo=TRUE)
