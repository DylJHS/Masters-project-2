#
# colnames(typed_data) <- newer_column_names
View(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
colnames(typed_data) <- column_names_prefixes
colnames(typed_data) <- newer_column_names
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
# newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
#                            paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
#                            paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
#
# prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- newer_column_names
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
colnames(typed_data) <- column_names_prefixes
colnames(typed_data) <- column_names_prefixes
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
# prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")
order_data <- original[,order(colnames(original))]
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- order_data
rownames(transformed_data) <- NULL
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
return((2^x)-1)
}
count_data <- transformed_data %>%
mutate(across(-1, untransform))
ids <- colnames(count_data)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
column_names <- c("Samples" ,  paste(participants, condition, sep = "."))
colnames(count_data) <- column_names
# Reset the row names to the Gene names
data <- count_data %>%
column_to_rownames(var = "Samples")
# Remove the unwanted tissue types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09","10","11","12","14","40")
samples_to_use <- data %>%  select(ends_with(codes_to_use))
# Map the codes by health status (cancer <= 9 < Normal)
mapped_data <- samples_to_use
new_column_names <- colnames(samples_to_use)
new_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
colnames(mapped_data) <- new_column_names
# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
mapped_data_complete <- mapped_data[, -cols_zeros]
} else {
mapped_data_complete <- mapped_data
}
# Get unique participants
unique_pairs <- unique(participants)
# List of participants with healthy/cancer paired samples
selected_columns <- c()
# Loop through each participant
for (pair in unique_pairs) {
# Find the participants with healthy/cancer sample pairings
columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data_complete))
matching_columns <- colnames(mapped_data_complete)[columns_with_pair]
if (length(matching_columns) > 1 && any(grepl("\\.N$", matching_columns)) && any(grepl("\\.C$",matching_columns))) {
# Add the found participants to the list
selected_columns <- c(selected_columns, matching_columns)
}
}
# filter the data on the list of participants with healthy/cancer paired samples
subset_mapped <- mapped_data_complete[, selected_columns]
# convert df to matrix
mapped_matrix <- subset_mapped %>% as.matrix()
d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))
dim(d0)
# Calculate the normalisation factor
d0 <- calcNormFactors(d0, method = "TMM")
# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
condition <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])
participants <- factor(participants)
# Create the factor for the condition. IMPORTANT: The order will determine how the logFCs are calculated, with the first level indicating the reference (denominator).
condition <- factor(condition, levels=c("N","C"))
# Remove low count genes, those with a count below 10
keep<-filterByExpr(d0,group = condition, min.count = 10)
d0<-d0[keep,,keep.lib.size=FALSE]
dim(d0)
plotMDS(d0, pch = 1, col = ifelse(condition == "C", "red", "blue"))
# Set the unique participants and the condition as the main effects.
mm <- model.matrix(~ participants + condition)
# Apply voom() to transfrom the data so that it is suitable for linear modelling.
y <- voom(d0, mm, plot = T)
# Fit the linear model
fit <- lmFit(y, mm)
# smooth the standard errors
fit2 <- eBayes(fit)
express_table <- topTable(fit2, coef="conditionN", sort.by = "P", n = Inf)
express_table <- topTable(fit2, coef="conditionN", sort.by = "P", n = Inf)
View(fit2)
View(mm)
View(d0)
View(mapped_matrix)
View(mm)
# Set the unique participants and the condition as the main effects.
mm <- model.matrix(~ participants + condition)
View(mm)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
# Original log transformed count data
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")
order_data <- original[,order(colnames(original))]
# Set of interest
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
soi_genes <-soi[,2]
transformed_data <- order_data[order_data$sample %in% soi_genes,]
rownames(transformed_data) <- NULL
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
return((2^x)-1)
}
count_data <- transformed_data %>%
mutate(across(-1, untransform))
ids <- colnames(count_data)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
column_names <- c("Samples" ,  paste(participants, condition, sep = "."))
colnames(count_data) <- column_names
# Reset the row names to the Gene names
data <- count_data %>%
column_to_rownames(var = "Samples")
# Remove the unwanted tissue types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09","10","11","12","14","40")
samples_to_use <- data %>%  select(ends_with(codes_to_use))
# Map the codes by health status (cancer <= 9 < Normal)
mapped_data <- samples_to_use
new_column_names <- colnames(samples_to_use)
new_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
colnames(mapped_data) <- new_column_names
# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
mapped_data <- mapped_data[, -cols_zeros]
# Get unique participants
unique_pairs <- unique(participants)
# List of participants with healthy/cancer paired samples
selected_columns <- c()
# Loop through each participant
for (pair in unique_pairs) {
# Find the participants with healthy/cancer sample pairings
columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data))
if (length(columns_with_pair) > 1) {
# Add the found participants to the list
selected_columns <- c(selected_columns, colnames(mapped_data)[columns_with_pair])
}
}
# Filter the data on the list of participants with healthy/cancer paired samples
subset_mapped <- mapped_data[, selected_columns]
# convert df to matrix
mapped_matrix <- subset_mapped %>% as.matrix()
d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))
dim(d0)
# Calculate the normalisation factor
d0 <- calcNormFactors(d0, method = "TMM")
# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
condition <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])
participants <- factor(participants)
condition <- factor(condition, levels=c("N","C"))
plotMDS(d0, pch = 1, col = ifelse(condition == "C", "red", "blue"))
# Set the unique participants and the condition as the main effects.
mm <- model.matrix(~ participants + condition)
# Apply voom() to transform the data so that it is suitable for linear modelling.
y <- voom(d0, mm, plot = T)
# Fit the linear model
fit <- lmFit(y, mm)
# smooth the standard errors
fit2 <- eBayes(fit)
express_table <- topTable(fit2, coef="conditionC", sort.by = "P", n = Inf)
usable_volcano <- EnhancedVolcano(express_table,
lab = rownames(express_table),
x = "logFC",
y = "P.Value",
title = "TCGA Differential Gene Expression",
subtitle = "Set-of-Interest genes only",
pointSize = 3,
drawConnectors = TRUE,
widthConnectors = 0.2,
colAlpha = 0.65,
xlim = c(-4,4),
# ylim = c(0,10),
pCutoff = 0.01,
FCcutoff = 1)
usable_volcano
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
express_table <- topTable(fit2, coef="conditionN", sort.by = "P", n = Inf)
express_table <- topTable(fit2, coef="conditionN", sort.by = "P", n = Inf)
View(mm)
participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
condition <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])
participants <- factor(participants)
# Create the factor for the condition. IMPORTANT: The order will determine how the logFCs are calculated, with the first level indicating the reference (denominator).
condition <- factor(condition, levels=c("N","C"))
# Remove low count genes, those with a count below 10
keep<-filterByExpr(d0,group = condition, min.count = 10)
d0<-d0[keep,,keep.lib.size=FALSE]
dim(d0)
View(d0)
View(d0)
# Map the codes by health status (cancer <= 9 < Normal)
typed_data <- samples_to_use
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
View(typed_data)
d0[["counts"]]
prefixes
newer_column_names
new_column_names
View(samples_to_use)
typed_data <- samples_to_use
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
newer_column_names
View(data)
View(original)
typed_data <- samples_to_use
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
newer_column_names
prefixes
typed_data <- samples_to_use
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
prefixes <- substr(newer_column_names,-1,-2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
prefixes
View(original)
View(count_data)
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
typed_data <- new_samples_to_use
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
prefixes <- substr(newer_column_names,-1,-2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
prefixes
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
typed_data <- new_samples_to_use
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
# abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
prefixes
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
typed_data <- new_samples_to_use
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
# column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
abbrvs
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
# colnames(typed_data) <- column_names_prefixes
#
# colnames(typed_data) <- column_names_prefixes
column_names_prefixes
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
colnames(typed_data) <- column_names_prefixes
View(new_samples_to_use)
View(typed_data)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")
order_data <- original[,order(colnames(original))]
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- order_data
rownames(transformed_data) <- NULL
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
return((2^x)-1)
}
count_data <- transformed_data %>%
mutate(across(-1, untransform))
ids <- colnames(count_data)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
column_names <- c("Samples" ,  paste(participants, condition, sep = "."))
colnames(count_data) <- column_names
# Reset the row names to the Gene names
data <- count_data %>%
column_to_rownames(var = "Samples")
# Remove the unwanted tissue types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09","10","11","12","14","40")
samples_to_use <- data %>%  select(ends_with(codes_to_use))
# Map the codes by health status (cancer <= 9 < Normal)
mapped_data <- samples_to_use
new_column_names <- colnames(samples_to_use)
new_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))
colnames(mapped_data) <- new_column_names
# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
mapped_data_complete <- mapped_data[, -cols_zeros]
} else {
mapped_data_complete <- mapped_data
}
# Get unique participants
unique_pairs <- unique(participants)
# List of participants with healthy/cancer paired samples
selected_columns <- c()
# Loop through each participant
for (pair in unique_pairs) {
# Find the participants with healthy/cancer sample pairings
columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data_complete))
matching_columns <- colnames(mapped_data_complete)[columns_with_pair]
if (length(matching_columns) > 1 && any(grepl("\\.N$", matching_columns)) && any(grepl("\\.C$",matching_columns))) {
# Add the found participants to the list
selected_columns <- c(selected_columns, matching_columns)
}
}
# filter the data on the list of participants with healthy/cancer paired samples
subset_mapped <- mapped_data_complete[, selected_columns]
# convert df to matrix
mapped_matrix <- subset_mapped %>% as.matrix()
d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))
dim(d0)
# Calculate the normalisation factor
d0 <- calcNormFactors(d0, method = "TMM")
# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
condition <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])
participants <- factor(participants)
# Create the factor for the condition. IMPORTANT: The order will determine how the logFCs are calculated, with the first level indicating the reference (denominator).
condition <- factor(condition, levels=c("N","C"))
# Remove low count genes, those with a count below 10
keep<-filterByExpr(d0,group = condition, min.count = 10)
d0<-d0[keep,,keep.lib.size=FALSE]
dim(d0)
plotMDS(d0, pch = 1, col = ifelse(condition == "C", "red", "blue"))
