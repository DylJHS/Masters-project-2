)
print(Euc_dist_plot)
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, dist(cor_data))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, Pears_dist_matrix)
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, Pears_dist_matrix)
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - Pears_dist_matrix))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cnv_cor_pear))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
# Ensure the dimensions are compatible
if (length(kmeans_model$cluster) != nrow(cor_data)) {
stop("Mismatch between cluster labels and data points")
}
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cnv_cor_pear))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 30
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
# Ensure the dimensions are compatible
if (length(kmeans_model$cluster) != nrow(cor_data)) {
stop("Mismatch between cluster labels and data points")
}
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cnv_cor_pear))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 3
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
# Ensure the dimensions are compatible
if (length(kmeans_model$cluster) != nrow(cor_data)) {
stop("Mismatch between cluster labels and data points")
}
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cnv_cor_pear))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 3
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cnv_cor_pear))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 3
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cor(cor_data)))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
n <- 3
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cor(trans_data)))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
n <- 5
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cor(trans_data)))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
n <- 15
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cor(trans_data)))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
n <- 2
Pears_dist_plot <-Heatmap(Pears_dist_matrix,
rect_gp = gpar(col = "black", lwd = 0.05),
col = colorRamp2(c(0, 1, 2), c("#20c712", "white", "purple2")),
row_names_gp = gpar(fontsize = 2),
column_names_gp = gpar(fontsize = 2),
column_km = n,
column_km_repeats = 300
)
print(Pears_dist_plot)
Euc_dist_plot <-Heatmap(Eucl_dist_matrix,
rect_gp = gpar(col = "black", lwd = 0.05),
col = colorRamp2(c(0, 1, 2), c("#20c712", "white", "purple2")),
row_names_gp = gpar(fontsize = 2),
column_names_gp = gpar(fontsize = 2),
column_km = n,
column_km_repeats = 300
)
print(Euc_dist_plot)
n <- 5
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, as.dist(1 - cor(trans_data)))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
n <- 5
# Calculate silhouette scores for different values of k
silhouette_scores <- numeric(length = n - 1)  # Adjust the length
for (k in 2:n) {  # Start from k=2
kmeans_model <- kmeans(cor_data, centers = k)
sil_score <- silhouette(kmeans_model$cluster, dist(cor_data))
silhouette_scores[k-1] <- mean(sil_score[, 3])  # Assuming you want the mean silhouette width
}
# Plot the silhouette method
plot(2:n, silhouette_scores[2:n], type = "b", xlab = "Number of Clusters (k)", ylab = "Silhouette Score")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(data.table) # For data manipulation
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("../../../Data/RNA_Data/GTEx_RNA_Healthy/GTEx_RNA_Full.csv")
# Reading the full RNA GTEx dataset
# GTEx_Samp_df <- fread("../../../Data/RNA_Data/GTEx_RNA_Healthy/GTEx_RNA_Full.csv")
# Reading the full RNA GTEx Annotation dataset
GTEx_meta_df <- fread("../../../Data/RNA_Data/GTEx_RNA_Healthy/GTEx_RNA_Subject_meta.csv")
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("../../../Data/RNA_Data/GTEx_RNA_Healthy/GTEx_RNA_Full.csv")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA_Healthy/GTEx_RNA_Full.csv")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv")
# Reading the full RNA GTEx Annotation dataset
GTEx_meta_df <- fread("../../../Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv")
# Reading the full RNA GTEx Annotation dataset
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
View(GTEx_meta_df)
View(GTEx_Samp_df)
print(ncol(GTEx_Samp_df))
# The current number of samples in the GTEx Dataset stands at 17385
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Samp_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
print(ncol(GTEx_Samp_df))
# The current number of samples in the GTEx Dataset stands at 17385
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Samp_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv")
# Reading the full RNA GTEx Annotation dataset
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
print(head(GTEx_Healthy_df))
View(GTEx_Healthy_df)
View(GTEx_Samp_df)
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the full RNA GTEx Annotation dataset
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
View(GTEx_Samp_df)
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
print(head(GTEx_Healthy_df))
View(GTEx_Healthy_df)
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
print(GTEx_Healthy_df)
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% c(cols_to_drop, 'Unnamed: 0'), with = FALSE]
print(GTEx_Healthy_df)
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df))
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df))
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df[, :5]))
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df[, 1:5]))
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df.ncols()))
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(head(GTEx_Healthy_df.ncols)
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(GTEx_Healthy_df.ncols())
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
install.packages("edger")
install.packages("BiocManager")
BiocManager::install("edgeR")
# Load necessary libraries
library(data.table) # For data manipulation
BiocManager::install("edgeR")
# Load necessary libraries
library(data.table) # For data manipulation
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
View(GTEx_Annotations_df)
# Get the SUBJIDS that correspond to the samples to be used
Viable_smaples <- GTEx_Healthy_df[GTEx_Annotations_df$SMRIN >= 6, ]
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
BiocManager::install("edgeR")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
# BiocManager::install("edgeR")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
# BiocManager::install("edgeR")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv",nrows= 100)
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Drop the columns
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
# Get the SUBJIDS that correspond to the samples to be used
Viable_smaples <- GTEx_Healthy_df[GTEx_Annotations_df$SMRIN >= 6, ]
# Get the SUBJIDS that correspond to the samples to be used
Viable_smaples <- GTEx_Healthy_df[, GTEx_Annotations_df$SMRIN >= 6 ]
print(ncol(GTEx_Healthy_df))
# Get the SUBJIDS that correspond to the samples to be used
Viable_smaples <- GTEx_Healthy_df[, GTEx_Annotations_df$SMRIN >= 6, with = FALSE ]
# Get the SUBJIDS that correspond to the samples to be used
Viable_smaples <- GTEx_Healthy_df[, GTEx_Annotations_df$SMRIN >= 6 ]
print(ncol(GTEx_Healthy_df))
Viable_smaples
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df["SMRIN", ] >= 6
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]
View(selected_samples)
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]
print(nrow(selected_samples))
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SMAPID
View(GTEx_Samp_df)
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SMAPID
# Get the SUBJIDS that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
selected_samples
# Get the Sample IDs that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
GTEx_Viable_Healthy <- GTEx_Healthy_df[GTEx_Healthy_df$Name %in% selected_samples, with = FALSE, ]
# Get the Sample IDs that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
GTEx_Viable_Healthy <- GTEx_Healthy_df[, colnames(GTEx_Healthy_df) %in% selected_samples, with = FALSE]
View(GTEx_Viable_Healthy)
# Get the Sample IDs that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
selected_samples <- c("Name", "Description", selected_samples)
GTEx_Viable_Healthy <- GTEx_Healthy_df[, colnames(GTEx_Healthy_df) %in% selected_samples, with = FALSE]
View(GTEx_Viable_Healthy)
ncol(GTEx_Viable_Healthy)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
# BiocManager::install("edgeR")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Counts_Full.csv")
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Create a new DF without the columns to be dropped
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
# Get the Sample IDs that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
selected_samples <- c("Name", "Description", selected_samples)
# Create a DF with the columns to be used
GTEx_Viable_Healthy <- GTEx_Healthy_df[, colnames(GTEx_Healthy_df) %in% selected_samples, with = FALSE]
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
# Load necessary libraries
library(data.table) # For data manipulation
# BiocManager::install("edgeR")
# Reading the full RNA GTEx dataset
GTEx_Samp_df <- fread("Data/RNA_Data/GTEx_RNA/Raw_GTEx_RNA_Norm.csv")
# Reading the first RNA GTEx metadata dataset that contains the phenotype of the subject
GTEx_meta_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_RNA_Subject_meta.csv")
# Reading the second metadata dataset that contains the rest of the metadata for the subjects
GTEx_Annotations_df <- fread("Data/RNA_Data/GTEx_RNA/GTEx_Annotations.csv")
# Get the SUBJIDS that correspond to the samples to be used
Healthy_Subjects <- unique(GTEx_meta_df[GTEx_meta_df$DTHHRDY %in% c(1, 2, 3, 0),]$SUBJID)
# Get the column names from the full RNA GTEX dataset
cols <- colnames(GTEx_Samp_df)[4:length(colnames(GTEx_Samp_df))]
# Get the columns that should be dropped from the dataset
cols_to_drop <- cols[!substr(cols, 1, 10) %in% Healthy_Subjects]
# Create a new DF without the columns to be dropped
GTEx_Healthy_df <- GTEx_Samp_df[, !colnames(GTEx_Samp_df) %in% cols_to_drop, with = FALSE]
print(ncol(GTEx_Healthy_df))
# Get the Sample IDs that correspond to the samples to be used
selected_samples <- GTEx_Annotations_df[GTEx_Annotations_df$SMRIN >= 6]$SAMPID
selected_samples <- c("Name", "Description", selected_samples)
# Create a DF with the columns to be used
GTEx_Viable_Healthy <- GTEx_Healthy_df[, colnames(GTEx_Healthy_df) %in% selected_samples, with = FALSE]
