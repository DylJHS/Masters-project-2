#   if (col_number < 2) {
#     next
#   }
#
#   print(head(specific_data))
#
#   # convert df to matrix
#   specific_matrix <- specific_data %>% as.matrix()
#
#   d5 <- DGEList(specific_matrix, group = sapply(colnames(specific_matrix), function(x) str_split(x, "\\.")[[1]][3]))
#   dim(d5)
#
#   # Calculate the normalisation factor
#   d5 <- calcNormFactors(d5, method = "TMM")
#
#   plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
#
#
# }
edited_column_selection
distinct_tissue_types <- unique(sapply(colnames(typed_data), function(x) str_split(x, "\\.")[[1]][1]))
new_column_selection <- selected_columns %>%  sapply(., function(x) str_split(x, "\\.")[[1]][1]) %>% unique()
edited_column_selection <- paste0(".",new_column_selection,".")
typed_subset <- typed_data %>% select(contains(new_column_selection))
#
# for (type in distinct_tissue_types) {
#
#   type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
#   specific_data <- typed_subset %>% select(all_of(type_cols))
#
#   col_number <- ncol(specific_data)
#   if (col_number < 2) {
#     next
#   }
#
#   print(head(specific_data))
#
#   # convert df to matrix
#   specific_matrix <- specific_data %>% as.matrix()
#
#   d5 <- DGEList(specific_matrix, group = sapply(colnames(specific_matrix), function(x) str_split(x, "\\.")[[1]][3]))
#   dim(d5)
#
#   # Calculate the normalisation factor
#   d5 <- calcNormFactors(d5, method = "TMM")
#
#   plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
#
#
# }
View(typed_subset)
distinct_tissue_types <- unique(sapply(colnames(typed_data), function(x) str_split(x, "\\.")[[1]][1]))
new_column_selection <- selected_columns %>%  sapply(., function(x) str_split(x, "\\.")[[1]][1]) %>% unique()
edited_column_selection <- paste0(".",new_column_selection,".")
typed_subset <- typed_data %>% select(contains(new_column_selection))
for (type in distinct_tissue_types) {
type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
specific_data <- typed_subset %>% select(all_of(type_cols))
col_number <- ncol(specific_data)
if (col_number < 2) {
next
}
print(head(specific_data))
# convert df to matrix
specific_matrix <- specific_data %>% as.matrix()
d5 <- DGEList(specific_matrix, group = sapply(colnames(specific_matrix), function(x) str_split(x, "\\.")[[1]][3]))
dim(d5)
# Calculate the normalisation factor
d5 <- calcNormFactors(d5, method = "TMM")
plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
}
participants
condition
tissue_type
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3]) %>% unique()
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
tissue_type
participants
condition
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3]) %>% unique()
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
tissue_type
condition
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- lapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- apply(ids, function(x) str_split(x, "\\.")[[1]][3])
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3]) %>% list())
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3]) %>% list()
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- unlist(sapply(ids, function(x) str_split(x, "\\.")[[1]][3]) )
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- unlist(sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- unlist(sapply(ids, function(x) str_split(x, "\\.")[[1]][3]))
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- as.list(sapply(ids, function(x) str_split(x, "\\.")[[1]][3]))
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- lapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- lapply(ids, function(x) unlist(str_split(x, "\\.")[[1]][3]))
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- sapply(ids, function(x) unlist(str_split(x, "\\.")[[1]][3]))
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
ids
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
new_count <- transformed_data %>%
mutate(across(-1, untransform))
# participants <- sapply(ids, function(x) unlist(str_split(x, "\\.")[[1]][3]))
participants <- extract_element(ids, 3)
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4]) %>% unique()
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2]) %>% unique()
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
participants
new_count <- transformed_data %>%
mutate(across(-1, untransform))
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids
# Reset the row names to the Gene names
new_data <- new_count %>%
column_to_rownames(var = "Samples")
new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))
# Reset the dataframe
typed_data <- new_samples_to_use
# Get the current column names
columns <- colnames(typed_data)
# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
paste0(substr(columns, 1, nchar(columns) - 2), "N"),
paste0(substr(columns, 1, nchar(columns) - 2), "C"))
ids
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
colnames(typed_data) <- column_names_prefixes
# Remove columns with 0 values throughout
cols_zeros <- which(apply(typed_data, 2, function(x) all(x == 0)))
typed_data <- typed_data[, -cols_zeros]
# Create a factor for the variables
participants <- factor(participants)
condition <- factor(condition, levels=c("N","C"))
selected_columns
distinct_tissue_types <- unique(extract_element(typed_data, 1))
distinct_tissue_types <- unique(extract_element(colnames(typed_data), 1))
new_column_selection <- selected_columns %>%  extract_element(., 1)
# edited_column_selection <- paste0(".",new_column_selection,".")
#
# typed_subset <- typed_data %>% select(contains(new_column_selection))
#
# for (type in distinct_tissue_types) {
#
#   type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
#   specific_data <- typed_subset %>% select(all_of(type_cols))
#
#   col_number <- ncol(specific_data)
#   if (col_number < 2) {
#     next
#   }
#
#   print(head(specific_data))
#
#   # convert df to matrix
#   specific_matrix <- specific_data %>% as.matrix()
#
#   d5 <- DGEList(specific_matrix, group = sapply(colnames(specific_matrix), function(x) str_split(x, "\\.")[[1]][3]))
#   dim(d5)
#
#   # Calculate the normalisation factor
#   d5 <- calcNormFactors(d5, method = "TMM")
#
#   plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
#
#
# }
distinct_tissue_types
new_column_selection
distinct_tissue_types <- unique(extract_element(colnames(typed_data), 1))
new_column_selection <- selected_columns %>%  extract_element(., 1)
edited_column_selection <- paste0(".",new_column_selection,".")
#
# typed_subset <- typed_data %>% select(contains(new_column_selection))
#
# for (type in distinct_tissue_types) {
#
#   type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
#   specific_data <- typed_subset %>% select(all_of(type_cols))
#
#   col_number <- ncol(specific_data)
#   if (col_number < 2) {
#     next
#   }
#
#   print(head(specific_data))
#
#   # convert df to matrix
#   specific_matrix <- specific_data %>% as.matrix()
#
#   d5 <- DGEList(specific_matrix, group = sapply(colnames(specific_matrix), function(x) str_split(x, "\\.")[[1]][3]))
#   dim(d5)
#
#   # Calculate the normalisation factor
#   d5 <- calcNormFactors(d5, method = "TMM")
#
#   plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
#
#
# }
edited_column_selection
distinct_tissue_types <- unique(extract_element(colnames(typed_data), 1))
new_column_selection <- selected_columns %>%  extract_element(., 1)
edited_column_selection <- paste0(".",new_column_selection,".")
typed_subset <- typed_data %>% select(contains(new_column_selection))
for (type in distinct_tissue_types) {
type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
specific_data <- typed_subset %>% select(all_of(type_cols))
col_number <- ncol(specific_data)
if (col_number < 2) {
next
}
print(head(specific_data))
# convert df to matrix
specific_matrix <- specific_data %>% as.matrix()
d5 <- DGEList(specific_matrix, group = extract_element(colnames(specific_matrix), 3))
dim(d5)
# Calculate the normalisation factor
d5 <- calcNormFactors(d5, method = "TMM")
plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
}
View(specific_matrix)
View(d5)
distinct_tissue_types <- unique(extract_element(colnames(typed_data), 1))
new_column_selection <- selected_columns %>%  extract_element(., 1)
edited_column_selection <- paste0(".",new_column_selection,".")
typed_subset <- typed_data %>% select(contains(new_column_selection))
for (type in distinct_tissue_types) {
type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
specific_data <- typed_subset %>% select(all_of(type_cols))
col_number <- ncol(specific_data)
if (col_number < 2) {
next
}
print(head(specific_data))
# convert df to matrix
specific_matrix <- specific_data %>% as.matrix()
d5 <- DGEList(specific_matrix, group = extract_element(colnames(specific_matrix), 3))
# Calculate the normalisation factor
d5 <- calcNormFactors(d5, method = "TMM")
# Create a factor for the variables
participants <- factor(participants)
condition <- factor(condition, levels=c("N","C"))
plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
}
View(specific_matrix)
distinct_tissue_types <- unique(extract_element(colnames(typed_data), 1))
new_column_selection <- selected_columns %>%  extract_element(., 1)
edited_column_selection <- paste0(".",new_column_selection,".")
typed_subset <- typed_data %>% select(contains(new_column_selection))
for (type in distinct_tissue_types) {
type_cols <-grep(paste0("^", type), colnames(typed_subset), value = TRUE)
specific_data <- typed_subset %>% select(all_of(type_cols))
col_number <- ncol(specific_data)
if (col_number < 2) {
next
}
print(head(specific_data))
# convert df to matrix
specific_matrix <- specific_data %>% as.matrix()
d5 <- DGEList(specific_matrix, group = extract_element(colnames(specific_matrix), 3))
# Calculate the normalisation factor
d5 <- calcNormFactors(d5, method = "TMM")
# Create a factor for the variables
participants <- extract_element(colnames(specific_matrix), 2)
condition <- extract_element(colnames(specific_matrix), 3)
participants <- factor(participants)
condition <- factor(condition, levels=c("N","C"))
plotMDS(d5, pch = 1, col = ifelse(condition == "C", "red", "blue"))
}
