---
title: "TCGA_RNA_COUNTS_XPLR"
format: html
editor: visual
Notes: This is a script that is intended to do some exploration of the samples in teh count based TCGA PanCan dataset.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

## Load the libraries

```{r}
library(dplyr)
library(plyr)
library(knitr)
library(tidyverse)
```

Load other options

```{r}
getOption("max.print")
```

REUSABLE FUNCTIONS

```{r}
extract_element <- function(strings, index) {
  # Split each string by "." and extract the third element
  element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
  return(element_list)
}
```

Load the datasets
```{r}

# RNAseq count data
count_data <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")

# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
sampletype <- read.csv("Data/Other/TCGA_meta/sampleType.tsv", sep = "\t", colClasses = c("character"))

# Set of Interest
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")

```

```{r}
transformed_data <- count_data
rownames(transformed_data) <- NULL


untransform <- function(x) {#Function to convert the log transformed counts back into original counts
  return((2^x)-1)
}

real_count_data <- transformed_data %>%
  mutate(across(-1, untransform))
```

Organise the data
```{r}
count_data_ordered <- real_count_data[,order(colnames(real_count_data))]

# Combine the metadata
meta <- left_join(tss_meta %>% 
                     select(c("TSS.Code", "Study.Name")) %>% 
                     distinct() %>% 
                     sapply(trimws) %>% 
                     as.data.frame(),
                   abbrv_meta %>%
                     select(c("Study.Abbreviation", "Study.Name")) %>% 
                     distinct()%>% 
                     sapply(trimws) %>% 
                     as.data.frame(), 
                   by = "Study.Name")
# Genes of Interest
goi <-soi[,2]
```


Edit the samples (column names) into ids so as to be able to identify the participant and the cancer type

```{r}
ids <- colnames(count_data_ordered)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
```


```{r}
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data_ordered) <- column_names

data <- count_data_ordered %>%
  column_to_rownames(var = "Genes")
```



```{r}
column_names <- colnames(data)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(data) <- column_names_prefixes
```


```{r}
new_column_names <- colnames(data)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(data) <- column_names_suffxes
```






































