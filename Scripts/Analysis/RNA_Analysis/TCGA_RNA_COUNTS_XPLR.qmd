---
title: "TCGA_RNA_COUNTS_XPLR"
format: html
editor: visual
Notes: This is a script that is intended to do some exploration of the samples in teh count based TCGA PanCan dataset.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

## Load the libraries

```{r}
library(dplyr)
library(plyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
```

Load other options

```{r}
getOption("max.print")
```

REUSABLE FUNCTIONS

```{r}
extract_element <- function(strings, index) {
  # Split each string by "." and extract the third element
  element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
  return(element_list)
}

untransform <- function(x) {#Function to convert the log transformed counts back into original counts
  return(ceiling((2^x)-1))
}
```

Load the datasets

```{r}

# RNAseq count data
# count_data <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")

# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
sampletype <- read.csv("Data/Other/TCGA_meta/sampleType.tsv", sep = "\t", colClasses = c("character"))

# Set of Interest
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")

# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")

```

```{r}
transformed_data <- count_data
rownames(transformed_data) <- NULL

real_count_data <- transformed_data %>%
  mutate_at(vars(-1), untransform)
```

Organise the data

```{r}
count_data_ordered <- real_count_data[,order(colnames(real_count_data))]

# Combine the metadata
meta <- left_join(tss_meta %>% 
                     select(c("TSS.Code", "Study.Name")) %>% 
                     distinct() %>% 
                     sapply(trimws) %>% 
                     as.data.frame(),
                   abbrv_meta %>%
                     select(c("Study.Abbreviation", "Study.Name")) %>% 
                     distinct()%>% 
                     sapply(trimws) %>% 
                     as.data.frame(), 
                   by = "Study.Name")
# Genes of Interest
goi <-soi[,2]
```
CONVERT THE GENE IDS INTO GENE NAMES

```{r}
counts_data <- right_join(gene_ids %>% 
                    dplyr::select(c("id", "gene")) %>% 
                    sapply(trimws) %>% 
                    as.data.frame(),
                  count_data_ordered,
                  by = c("id" = "sample")) %>% 
  dplyr::select(-"id")

count_data <- counts_data %>%
  mutate(gene = trimws(gene))
  
```

2. Edit the samples (column names) into ids so as to be able to identify the participant and the sample and cancer type

2.1. extract the different elements from the sample names
```{r}
ids <- colnames(count_data_ordered)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
```

2.2. Reform the column names using the extracted elements and reset the index as the Genes
```{r}
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data_ordered) <- column_names

data <- count_data_ordered %>%
  column_to_rownames(var = "Genes")

# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09")
samples_to_use <- data %>%  dplyr::select(ends_with(codes_to_use))
```

Convert data to a data.table for faster processing during the grouping of the duplicate genes
```{r}
setDT(samples_to_use)  

# Combine duplicate genes together using the median of the expression
grouped <- samples_to_use[, lapply(.SD, function(x) if (length(x) > 1) ceiling(median(x, na.rm = TRUE)) else x), by = Genes, .SDcols = -"Genes"]
```

2.3. Assign the TSS abbreviation to the column name in place of the TSS code
```{r}
column_names <- colnames(samples_to_use)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(samples_to_use) <- column_names_prefixes
```

2.4. Assign the sample type abbreviation to the column name in place of the sample type code
```{r}
new_column_names <- colnames(samples_to_use)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(samples_to_use) <- column_names_suffxes
```


3.1. Create the tissue & sample-based subset 
```{r}

sampled_data <- as.data.frame(colnames(samples_to_use)) %>% 
  group_by(TSS := extract_element(colnames(samples_to_use), 1),
           ST := extract_element(colnames(samples_to_use), 3)) %>% 
  select(TSS, ST ) %>% 
  count()
  
```

3.2. Find the groups that have less than 10 samples 
```{r}
less_than10 <- sampled_data %>% 
  filter(sampled_data$freq < 10) 
```

