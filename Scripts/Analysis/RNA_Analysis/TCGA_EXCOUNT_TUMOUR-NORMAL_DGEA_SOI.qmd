---
title: "TCGA COUNT TUMOUR - NORMAL DGEA"
format: html
editor: visual
Note: This script is for the anlysis of the Differential Gene expression between the cancerous and non-cancerous TCGA Expected count data using the SOI only.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

Load the packages

```{r}
library(dplyr)
library(knitr)
library(tidyverse) 
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
```

COLLECTION Load the data

```{r}
# Original log transformed count data
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")
order_data <- original[,order(colnames(original))]

# Set of interest
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")

# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
 abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
 meta <- left_join(tss_meta %>% 
                     select(c("TSS.Code", "Study.Name")) %>% 
                     distinct() %>% 
                     sapply(trimws) %>% 
                     as.data.frame(),
                   abbrv_meta %>% 
                     select(c("Study.Abbreviation", "Study.Name")) %>% 
                     distinct()%>% 
                     sapply(trimws) %>% 
                     as.data.frame(), 
                   by = "Study.Name")
```

I. ALL SAMPLES/TISSUE TYPES

CLEANING & PREPROCESSING Filter on the SOI

```{r}
soi_genes <-soi[,2]

transformed_data <- order_data[order_data$sample %in% soi_genes,]
rownames(transformed_data) <- NULL
```

Re-transform the data from the y = 2(x+1) values to the actual counts using x = 2^y^âˆ’1.

```{r}
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
  return((2^x)-1)
}

count_data <- transformed_data %>%
  mutate(across(-1, untransform))
```

Convert the samples (column names) into ids so as to be able to identify the participant and the cancer type.

```{r}
ids <- colnames(count_data)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])

column_names <- c("Samples" ,  paste(participants, condition, sep = "."))
colnames(count_data) <- column_names
```

Edit ids so as to be able to identify the condition (Cancer/Normal)

```{r}
# Reset the row names to the Gene names
data <- count_data %>%
  column_to_rownames(var = "Samples") 

# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09","10","11","12","14","40")
samples_to_use <- data %>%  select(ends_with(codes_to_use))

# Map the codes by health status (cancer <= 9 < Normal)
mapped_data <- samples_to_use
new_column_names <- colnames(samples_to_use)
new_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
                           paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
                           paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))

colnames(mapped_data) <- new_column_names
```

Removal of undesirable ids/samples; those that lack expression counts and those that are not part of a healthy/cancerous pair.

```{r}
# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
mapped_data <- mapped_data[, -cols_zeros]

# Get unique participants
unique_pairs <- unique(participants)

# List of participants with healthy/cancer paired samples
selected_columns <- c()

# Loop through each participant
for (pair in unique_pairs) {
  # Find the participants with healthy/cancer sample pairings
  columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data))
  if (length(columns_with_pair) > 1) {
    # Add the found participants to the list
    selected_columns <- c(selected_columns, colnames(mapped_data)[columns_with_pair])
  }
}

# Filter the data on the list of participants with healthy/cancer paired samples
subset_mapped <- mapped_data[, selected_columns]
```

DGE MODELLING Define the matrix, create its DGE object & get the normalisation library factors

```{r}
# convert df to matrix 
 mapped_matrix <- subset_mapped %>% as.matrix()

d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))

dim(d0)

# Calculate the normalisation factor 
d0 <- calcNormFactors(d0, method = "TMM")

# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
```

Create the factors for the data. IMPORTANT: The order of the condition factor will determine how the logFCs are calculated, with the first level representing the reference (denominator).

```{r}
participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
condition <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])

participants <- factor(participants)
condition <- factor(condition, levels=c("N","C"))
```

Plot the 2 dimensional graph of the main logFC components.

```{r}
plotMDS(d0, pch = 1, col = ifelse(condition == "C", "red", "blue"))
```

Create & fit a linear model to the data.

```{r}
# Set the unique participants and the condition as the main effects.
mm <- model.matrix(~ participants + condition)

# Apply voom() to transform the data so that it is suitable for linear modelling.
y <- voom(d0, mm, plot = T)

# Fit the linear model
fit <- lmFit(y, mm)

# smooth the standard errors
fit2 <- eBayes(fit)
```

Get the table of all the genes and their fold changes and significance

```{r}
express_table <- topTable(fit2, coef="conditionC", sort.by = "P", n = Inf)
```

Plot the volcano plot

```{r}
usable_volcano <- EnhancedVolcano(express_table,
                lab = rownames(express_table),
                x = "logFC",
                y = "P.Value",
                title = "TCGA Differential Gene Expression",
                subtitle = "Set-of-Interest genes only",
                pointSize = 3,
                drawConnectors = TRUE,
                widthConnectors = 0.2,
                colAlpha = 0.65,
                xlim = c(-4,4),
                # ylim = c(0,10),
                pCutoff = 0.01,
                FCcutoff = 1)
usable_volcano
```

II. PARSED BY TISSUE/CANCER TYPE

Edit ids so as to be able to identify the condition (Cancer/Normal) as well as the Tissue Type (ex: Breast, Lung ...)
based on the tumour type and its corresponding control group
```{r}
new_count <- transformed_data %>%
  mutate(across(-1, untransform))

participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
condition <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])

new_ids <- c("Samples" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(new_count) <- new_ids

# Reset the row names to the Gene names
new_data <- new_count %>%
  column_to_rownames(var = "Samples") 

new_samples_to_use <- new_data %>%  select(ends_with(codes_to_use))

# Reset the new dataframe
typed_data <- new_samples_to_use

# Get the current column names
columns <- colnames(typed_data)

# Map the codes by health status (cancer <= 9 < Normal)
newer_column_names <- ifelse(as.integer(substr(columns, nchar(columns) - 1, nchar(columns))) > 9,
                           paste0(substr(columns, 1, nchar(columns) - 2), "N"),
                           paste0(substr(columns, 1, nchar(columns) - 2), "C"))
```

Assign the new ids to the respective columns in the DF
```{r}
prefixes <- substr(newer_column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(newer_column_names, 3, nchar(newer_column_names)))
colnames(typed_data) <- column_names_prefixes
```
