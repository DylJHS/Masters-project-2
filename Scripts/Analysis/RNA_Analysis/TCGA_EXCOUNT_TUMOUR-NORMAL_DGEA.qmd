---
title: "TCGA COUNT TUMOUR - NORMAL DGEA"
format: html
editor: visual
Note: This script is for the anlysis of the Differential Gene expression between the cancerous and non-cancerous TCGA Expected count data.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

Load the packages

```{r}
library(dplyr)
library(knitr)
library(tidyverse) 
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
```

Load the data

```{r}
# original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")
order_data <- original[,order(colnames(original))]
```

Reduce to the SOI
```{r}

# soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]


transformed_data <- order_data[order_data$sample %in% soi_genes,]
rownames(transformed_data) <- NULL
```

Re-transform the data from the y = 2(x+1) values to the actual counts using x = 2^y^âˆ’1.

```{r}
untransform <- function(x) {
  return((2^x)-1)
}

count_data <- transformed_data %>%
  mutate(across(-1, untransform))
```

Transform the column names
```{r}
ids <- colnames(count_data)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
tissue_status <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])

column_names <- c("Samples" ,  paste(participants, tissue_status, sep = "."))
colnames(count_data) <- column_names
```

Edits to the columns 
```{r}
# Reset the row names to the Gene names
data <- count_data %>%
  column_to_rownames(var = "Samples") 

# Remove the unwanted tissue types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09","10","11","12","14","40")
samples_to_use <- data %>%  select(ends_with(codes_to_use))

# Map the codes by health status (cancer <= 9 < Normal)
mapped_data <- samples_to_use
new_column_names <- colnames(samples_to_use)
new_column_names <- ifelse(as.integer(substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))) > 9,
                           paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "N"),
                           paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), "C"))

colnames(mapped_data) <- new_column_names

# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
mapped_data <- mapped_data[, -cols_zeros]

# Remove samples that don't have a pair 
unique_pairs <- unique(participants)

selected_columns <- c()

# Loop through each unique pair
for (pair in unique_pairs) {
  # Find the columns with the pair
  columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data))
  if (length(columns_with_pair) > 1) {
    selected_columns <- c(selected_columns, colnames(mapped_data)[columns_with_pair])
  }
}

# Select the columns with pairs from the dataframe
subset_mapped <- mapped_data[, selected_columns]
# subset_mapped <- subset_mapped[,]

```


```{r}
# convert df to matrix 
 mapped_matrix <- subset_mapped %>% as.matrix()

d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))
d0

# Remove low count genes
# keep<-filterByExpr(d0,group = tissue_status)
# d0<-d0[keep,keep.lib.size=FALSE]
# 
# dim(d0)

# Calculate the normalisation factor 
d0 <- calcNormFactors(d0, method = "TMM")

# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
```


```{r}

participants <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][1])
tissue_status <- sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2])

participants <- factor(participants)
tissue_status <- factor(tissue_status, levels=c("C","N"))

plotMDS(d0, col = ifelse(tissue_status == "C", "red", "blue"))
```


```{r}
mm <- model.matrix(~ participants + tissue_status)
y <- voom(d0, mm, plot = T)

```

Fit the linear model

```{r}
fit <- lmFit(y, mm)
fit2 <- eBayes(fit)
```



```{r}
express_table <- topTable(fit2, coef="tissue_statusN", sort.by = "P", n = Inf)
```


Plot the volcano of the genes
```{r}
usable_volcano <- EnhancedVolcano(express_table,
                lab = rownames(express_table),
                x = "logFC",
                y = "P.Value",
                selectLab = c('soi'),
                # pointSize = c(ifelse(usable_tissues$Set == "soi", 4, 1)),
                # drawConnectors = TRUE,
                # widthConnectors = 0.2,
                # xlim = c(-0.95,0.95),
                # ylim = c(0,10),
                # pCutoff = 0.05,
                FCcutoff = quantile(express_table$logFC, probs = 0.75))
usable_volcano

```






Redo the above but using the tissue type as a factor in the DGE as well as tissue status and participant

```{r}

count_data2 <- transformed_data %>%
  mutate(across(-1, untransform))
```

Transform the column names
```{r}
ids <- colnames(count_data2)[-1]
participants <- sapply(ids, function(x) str_split(x, "\\.")[[1]][3])
tissue_status <- sapply(ids, function(x) str_split(x, "\\.")[[1]][4])
tissue_type <- sapply(ids, function(x) str_split(x, "\\.")[[1]][2])

column_names2 <- c("Samples" ,  paste(tissue_type, participants, tissue_status,  sep = "."))
colnames(count_data2) <- column_names2
```

Edits to the columns 
```{r}
# Reset the row names to the Gene names
data2 <- count_data2 %>%
  column_to_rownames(var = "Samples") 

# Remove the unwanted tissue types from the samples based on the code
samples_to_use2 <- data2 %>%  select(ends_with(codes_to_use))

# Map the codes by health status (cancer <= 9 < Normal)
mapped_data2 <- samples_to_use2
new_column_names2 <- colnames(samples_to_use2)
new_column_names2 <- ifelse(as.integer(substr(new_column_names2, nchar(new_column_names2) - 1, nchar(new_column_names))) > 9,
                           paste0(substr(new_column_names2, 1, nchar(new_column_names2) - 2), "N"),
                           paste0(substr(new_column_names2, 1, nchar(new_column_names2) - 2), "C"))

colnames(mapped_data2) <- new_column_names2

# Remove columns with 0 values throughout
cols_zeros <- which(apply(mapped_data, 2, function(x) all(x == 0)))
mapped_data <- mapped_data[, -cols_zeros]

# Remove samples that don't have a pair 
unique_pairs <- unique(participants)

selected_columns <- c()

# Loop through each unique pair
for (pair in unique_pairs) {
  # Find the columns with the pair
  columns_with_pair <- grep(paste0("^", pair, "\\."), colnames(mapped_data))
  if (length(columns_with_pair) > 1) {
    selected_columns <- c(selected_columns, colnames(mapped_data)[columns_with_pair])
  }
}

# Select the columns with pairs from the dataframe
subset_mapped <- mapped_data[, selected_columns]
# subset_mapped <- subset_mapped[,]

```


```{r}
# convert df to matrix 
 mapped_matrix <- subset_mapped %>% as.matrix()

d0 <- DGEList(mapped_matrix, group = sapply(colnames(mapped_matrix), function(x) str_split(x, "\\.")[[1]][2]))
d0

# Remove low count genes
# keep<-filterByExpr(d0,group = tissue_status)
# d0<-d0[keep,keep.lib.size=FALSE]
# 
# dim(d0)

# Calculate the normalisation factor 
d0 <- calcNormFactors(d0, method = "TMM")

# Assess the extent of the differences library size to determine the correct approach
max_lib_size_dif <- max(d0$samples$lib.size)/min(d0$samples$lib.size)
rel_lib_size_dif <- median(d0$samples$lib.size)/min(d0$samples$lib.size)
```

