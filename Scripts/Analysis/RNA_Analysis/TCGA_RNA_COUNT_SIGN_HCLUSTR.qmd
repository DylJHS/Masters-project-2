---
title: "TCGA_RNA_SIGNATURE_HIERARCHIAL_CLUSTER_METHOD"
format: html
editor: visual
Note: This script is for the creation of the gene signatures using the metagene clustering approach.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

PACKAGES

```{r}
library(dplyr)
library(knitr)
library(tidyverse) 
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
library(ggplot2)
```

REUSABLE FUNCTIONS

```{r}
extract_element <- function(strings, index) {
  # Split each string by "." and extract the third element
  element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
  return(element_list)
}
```

### 1. COLLECT DATASETS

1.1 LOAD THE RNASEQ DATASETS

```{r}
# RNAseq count data
count_data <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_RSEM_Hugo_norm_count.csv")

# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")

# Set of Interest
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")

```

1.2 ORGANISE THE DATAFRAMES

```{r}
count_data_ordered <- count_data[,order(colnames(count_data))]

# Combine the metadata
meta <- left_join(tss_meta %>% 
                     select(c("TSS.Code", "Study.Name")) %>% 
                     distinct() %>% 
                     sapply(trimws) %>% 
                     as.data.frame(),
                   abbrv_meta %>%
                     select(c("Study.Abbreviation", "Study.Name")) %>% 
                     distinct()%>% 
                     sapply(trimws) %>% 
                     as.data.frame(), 
                   by = "Study.Name")

# Genes of Interest
goi <-soi[,2]
```

### 2. CLEAN & PREPROCESS THE DATA

2.1 EDIT THE SAMPLE NAMES (COLUMN NAMES) INTO IDS SO AS TO BE ABLE TO IDENTIFY THE PARTICIPANT AND THE CANCER TYPE

```{r}
ids <- colnames(count_data_ordered)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)

column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data_ordered) <- column_names
```

2.) UN-TRANSFORM THE LOG COUNTS (y = Log2(x+1)) TO THE ORIGINAL COUNTS (x = 2yâˆ’1)

```{r}
transformed_data <- count_data_ordered
rownames(transformed_data) <- NULL


untransform <- function(x) {#Function to convert the log transformed counts back into original counts
  return((2^x)-1)
}

original_counts <- transformed_data %>%
  mutate(across(-1, untransform))
```

Remove tissue types samples whose number is below a certain threshold Calculate the untransformed counts 4) Convert the df to a matrix 5) Calculate the normalisation factors 6) Render the normalised count df 7) Create the expression-based correlation matrix
