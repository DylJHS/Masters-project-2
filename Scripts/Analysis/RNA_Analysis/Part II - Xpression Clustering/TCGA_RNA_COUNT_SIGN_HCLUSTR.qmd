---
title: "TCGA_RNA_SIGNATURE_HIERARCHIAL_CLUSTER_METHOD"
format: html
editor: visual
Note: This script is for the creation of the gene signatures using the metagene clustering approach.
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

PACKAGES

```{r}
library(dplyr)
library(knitr)
library(tidyverse) 
library(paletteer)
library(ggrepel)
library(ggplot2)
library(pheatmap)
library(Hmisc)
library(dendextend)
```

REUSABLE FUNCTIONS

```{r}
extract_element <- function(strings, index) {
  # Split each string by "." and extract the third element
  element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
  return(element_list)
}
```

### 1. COLLECT DATASETS

1.1 LOAD THE RNASEQ DATASETS

```{r}
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")

# Set of Interest TPM data
full_soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi <- soi[-1]
```

1.2 ORGANISE THE DATAFRAMES

```{r}

# Combine the metadata
meta <- left_join(tss_meta %>% 
                     select(c("TSS.Code", "Study.Name")) %>% 
                     distinct() %>% 
                     sapply(trimws) %>% 
                     as.data.frame(),
                   abbrv_meta %>%
                     select(c("Study.Abbreviation", "Study.Name")) %>% 
                     distinct()%>% 
                     sapply(trimws) %>% 
                     as.data.frame(), 
                   by = "Study.Name")

```

### 2. CLEAN & PRE-PROCESS THE DATA

2.1 EDIT THE SAMPLE NAMES (COLUMN NAMES) INTO IDS SO AS TO BE ABLE TO IDENTIFY THE PARTICIPANT AND THE CANCER TYPE
```{r}
ids <- colnames(soi)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)

column_names <- c("Gene" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(soi) <- column_names
```

2.2 FORMAT THE DF
```{r}
# Summarise the duplicate genes by their mean
log_data <- soi %>% 
  group_by(Gene) %>%
  summarise(across(everything(), ~mean(., na.rm = TRUE)))

# Set the Gene column as the rownames
# and transpose the df so rows become the columns
final_df <- log_data %>%
  column_to_rownames(var = "Gene") %>% 
  t()
```


### 3. PROCESSING

3.1 CORRELATION MATRIX CREATION
```{r}
# Calculate the correlation matrix 
corr_matrix <- rcorr(final_df) # correlation matrix
matrix_coefs <- corr_matrix$r # correlation coef matrix
matrix_sigif <- corr_matrix$P # correlation coef p_value matrix

# Set the breakpoint where the change in color will occur 
myBreaks <- c(seq(-1, 0.00, length.out = 100), seq(0.01, 1, length.out = 100))
myColors <- colorRampPalette(c("blue1", "white","red4"))(length(myBreaks) - 1)

# Create and save the resulting heatmap
cor_heatmap <- pheatmap(matrix_coefs, color = myColors, breaks = myBreaks)
ggsave("heatmap.pdf",   
       plot = cor_heatmap,
       width = 30,
       height = 25)
```

3.2 DISTANCE MATRIX CREATION
```{r}
# Create the distance matrix
dist_matrix <- as.dist(1 - cor(final_df)) # dissimilarity matrix
dist_df <- as.data.frame(1 - cor(final_df)) # dissimilarity df

# Create the resulting distance heatmap
dist_heatmap <- pheatmap(dist_matrix)
```

3.3 DENDROGRAM GENERATION
```{r}
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix 
distance.tree <- hclust(dist_matrix, method="average") %>%
  as.dendrogram()

nleaves(distance.tree) # number of genes
nnodes(distance.tree) # number of total merges

# Get the different heights that show up in the tree
# and sort them
node_heights <- distance.tree %>% 
  get_nodes_attr("height") %>% 
  unique() %>% 
  sort()

# Plot the tree
distance.tree %>% dendextend::set("labels_cex", 0.4) %>% plot()
```
3.4 FIXED CLUSTERING EXAMPLE 
```{r}
# Select a specific height at which to cut and therefore
# cluster the genes
cutheight = 320

# Get the resulting clusters
clusters <- cutree(distance.tree, h = node_heights[cutheight])

# Plot the resulting tree
plot(color_branches(distance.tree, h=node_heights[cutheight]),leaflab="none", col = paletteer_c("grDevices::Terrain 2", length(unique(clusters))))
```
3.5 HEIGHT BASED CLUSTERING OPTIMISATION
```{r}
# Set the breakpoint where the change in color will occur 
newBreaks <- c(seq(-1, 0.00, length.out = 100), seq(0.01, 1, length.out = 100))

for (height in seq(1,length(node_heights)-1,10)){
  # Select the cut height 
  cutheight = node_heights[height]
  
  # Get the resulting clusters
  clusters <- cutree(distance.tree, h = cutheight)
  
  # Get the number of clusters
  n_clusters <- length(unique(clusters))
  
  # Get the genetic makeup of each cluster
  cluster_df <- as.data.frame(clusters)%>%
  rownames_to_column("Gene")

  # Redefine the expression data in terms of the clusters
  clustered_xprss <- left_join(log_data,
                   cluster_df,
                   by = "Gene") %>% 
    mutate(n_genes = map_dbl(clusters, 
                             ~sum(.x == clusters, na.rm = TRUE)
                             ), # number of genes in the cluster
           Cluster.Name = ifelse(n_genes == 1, Gene, 
                                 paste0("Clust.",clusters))) %>% 
    group_by(Cluster.Name) %>%
    summarise(across(-Gene, ~ mean(., na.rm = TRUE))) %>% 
    select(-c("clusters","n_genes"))
  
  # Create the corresponding correlation matrix
  clustered_corr <- clustered_xprss %>% 
    column_to_rownames("Cluster.Name") %>% 
    t() %>% 
    cor(., method = "pearson")
  
  # Calculate the coefficient score
  
  
  # Plot the resulting tree
  plot(color_branches(distance.tree, h=cutheight),leaflab="none", col = paletteer_c("grDevices::Terrain 2", length(unique(clusters))), main = " Hierarchical clustering (average method)")
  abline(h = cutheight, col = "red", lwd = 0.75)
  mtext(paste0("Cut Height of ",round(cutheight, 2),", yeilding ", n_clusters, " clusters"), side = 3, line = 0.5, cex = 0.8, adj = 0.5)

  clust_heatmap <- pheatmap(clustered_corr, breaks = newBreaks ,color = myColors)
  ggsave(paste0("clsutered_heatmap", height, ".pdf"),   
       plot = clust_heatmap,
       width = 30,
       height = 25)
}
```


