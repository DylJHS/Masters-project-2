ids <- colnames(count_data)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data) <- column_names
count_data <- setDT(count_data)
# Combine duplicate genes together using the median of the expression
grouped <- count_data[, lapply(.SD, function(x) if (length(x) > 1) ceiling(median(x, na.rm = TRUE)) else x), by = Genes, .SDcols = -"Genes"]
data <- grouped %>%
column_to_rownames(var = "Genes")
# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09")
samples_to_use <- data %>%  dplyr::select(ends_with(codes_to_use))
column_names <- colnames(samples_to_use)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(samples_to_use) <- column_names_prefixes
new_column_names <- colnames(samples_to_use)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(samples_to_use) <- column_names_suffxes
# Remove 0 genes and samples
unzero_d <- samples_to_use[rowSums(samples_to_use[]) > 0, ] # samples
cols_zeros <- which(apply(unzero_d, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
reduced <- unzero_d[, -cols_zeros]
} else {
reduced <- unzero_d
}
# convert df to matrix
mapped_matrix <- as.matrix(reduced)
# Calculate the normalisation factor
d0 <- edgeR::calcNormFactors(mapped_matrix, method = "TMM")
# Scale Gene counts
# Divide the samples by their corresponding normalisation factors
scaled_data <- base::sweep(samples_to_use, 2, d0, "/") # scalling the genes (2 = columns)
scaled_data <- ceiling(scaled_data) # Round up
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x) + 1)
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x + 1))
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Convert the MDS object to a dataframe with additional features
mds_df <- as.data.frame(mds) %>%
dplyr::mutate(cancer_type = extract_element(rownames(t_scaled_log_data), 1),
sample_type = extract_element(rownames(t_scaled_log_data), 3))
# Create the plots of the MDS.
sample_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "sample_type", # Colour based on the sample type
size = 1,
repel = TRUE)
cancer_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "cancer_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
# Save the plots.
ggsave("sample_mds_plot.png",
plot = sample_mds,
width = 8,
height = 6,
dpi = 300)
ggsave("cancer_mds_plot.png",
plot = cancer_mds,
width = 8,
height = 6,
dpi = 300)
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = log(x + 1))
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x + 1))
# RNAseq count data
# original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
test <- original[0:5000,0:10]
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
sampletype <- read.csv("Data/Other/TCGA_meta/sampleType.tsv", sep = "\t", colClasses = c("character"))
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
# soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- test
rownames(transformed_data) <- NULL
real_count_data <- transformed_data %>%
mutate_at(vars(-1), untransform)
count_data_ordered <- real_count_data[,order(colnames(real_count_data))]
# Combine the metadata
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
counts_data <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_data_ordered,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
count_data <- counts_data %>%
mutate(gene = trimws(gene))
ids <- colnames(count_data)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data) <- column_names
count_data <- setDT(count_data)
# Combine duplicate genes together using the median of the expression
grouped <- count_data[, lapply(.SD, function(x) if (length(x) > 1) ceiling(median(x, na.rm = TRUE)) else x), by = Genes, .SDcols = -"Genes"]
data <- grouped %>%
column_to_rownames(var = "Genes")
# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09")
samples_to_use <- data %>%  dplyr::select(ends_with(codes_to_use))
column_names <- colnames(samples_to_use)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(samples_to_use) <- column_names_prefixes
new_column_names <- colnames(samples_to_use)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(samples_to_use) <- column_names_suffxes
# Remove 0 genes and samples
unzero_d <- samples_to_use[rowSums(samples_to_use[]) > 0, ] # samples
cols_zeros <- which(apply(unzero_d, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
reduced <- unzero_d[, -cols_zeros]
} else {
reduced <- unzero_d
}
# convert df to matrix
mapped_matrix <- as.matrix(reduced)
# Calculate the normalisation factor
d0 <- edgeR::calcNormFactors(mapped_matrix, method = "TMM")
# Scale Gene counts
# Divide the samples by their corresponding normalisation factors
scaled_data <- base::sweep(samples_to_use, 2, d0, "/") # scalling the genes (2 = columns)
scaled_data <- ceiling(scaled_data) # Round up
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x + 1))
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Convert the MDS object to a dataframe with additional features
mds_df <- as.data.frame(mds) %>%
dplyr::mutate(cancer_type = extract_element(rownames(t_scaled_log_data), 1),
sample_type = extract_element(rownames(t_scaled_log_data), 3))
# Create the plots of the MDS.
sample_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "sample_type", # Colour based on the sample type
size = 1,
repel = TRUE)
cancer_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "cancer_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
# Save the plots.
ggsave("sample_mds_plot.png",
plot = sample_mds,
width = 8,
height = 6,
dpi = 300)
ggsave("cancer_mds_plot.png",
plot = cancer_mds,
width = 8,
height = 6,
dpi = 300)
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
View(t_scaled_log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
View(sample_dist_df)
# RNAseq count data
# original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
test <- original[0:10000,0:10]
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
sampletype <- read.csv("Data/Other/TCGA_meta/sampleType.tsv", sep = "\t", colClasses = c("character"))
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
# soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- test
rownames(transformed_data) <- NULL
real_count_data <- transformed_data %>%
mutate_at(vars(-1), untransform)
count_data_ordered <- real_count_data[,order(colnames(real_count_data))]
# Combine the metadata
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
counts_data <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_data_ordered,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
count_data <- counts_data %>%
mutate(gene = trimws(gene))
ids <- colnames(count_data)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data) <- column_names
count_data <- setDT(count_data)
# Combine duplicate genes together using the median of the expression
grouped <- count_data[, lapply(.SD, function(x) if (length(x) > 1) ceiling(median(x, na.rm = TRUE)) else x), by = Genes, .SDcols = -"Genes"]
data <- grouped %>%
column_to_rownames(var = "Genes")
# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09")
samples_to_use <- data %>%  dplyr::select(ends_with(codes_to_use))
column_names <- colnames(samples_to_use)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(samples_to_use) <- column_names_prefixes
new_column_names <- colnames(samples_to_use)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(samples_to_use) <- column_names_suffxes
# Remove 0 genes and samples
unzero_d <- samples_to_use[rowSums(samples_to_use[]) > 0, ] # samples
cols_zeros <- which(apply(unzero_d, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
reduced <- unzero_d[, -cols_zeros]
} else {
reduced <- unzero_d
}
# convert df to matrix
mapped_matrix <- as.matrix(reduced)
# Calculate the normalisation factor
d0 <- edgeR::calcNormFactors(mapped_matrix, method = "TMM")
# Scale Gene counts
# Divide the samples by their corresponding normalisation factors
scaled_data <- base::sweep(samples_to_use, 2, d0, "/") # scalling the genes (2 = columns)
scaled_data <- ceiling(scaled_data) # Round up
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x + 1))
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Convert the MDS object to a dataframe with additional features
mds_df <- as.data.frame(mds) %>%
dplyr::mutate(cancer_type = extract_element(rownames(t_scaled_log_data), 1),
sample_type = extract_element(rownames(t_scaled_log_data), 3))
# Create the plots of the MDS.
sample_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "sample_type", # Colour based on the sample type
size = 1,
repel = TRUE)
cancer_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "cancer_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
# Save the plots.
ggsave("sample_mds_plot.png",
plot = sample_mds,
width = 8,
height = 6,
dpi = 300)
ggsave("cancer_mds_plot.png",
plot = cancer_mds,
width = 8,
height = 6,
dpi = 300)
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(EnhancedVolcano)
library(ggrepel)
library(ggplot2)
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
# RNAseq tpm data
count_data <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
library(dplyr)
library(plyr)
library(knitr)
library(tidyverse)
library(edgeR)
library(limma)
library(data.table)
library(ggpubr)
getOption("max.print")
extract_element <- function(strings, index) {
# Split each string by "." and extract the third element
element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
return(element_list)
}
untransform <- function(x) {#Function to convert the log transformed counts back into original counts
return(ceiling((2^x)-1))
}
# RNAseq count data
# original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
test <- original[0:10000,0:10]
# RNAseq count data
original <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
test <- original[0:10000,0:10]
# Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
sampletype <- read.csv("Data/Other/TCGA_meta/sampleType.tsv", sep = "\t", colClasses = c("character"))
# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]
transformed_data <- test
rownames(transformed_data) <- NULL
real_count_data <- transformed_data %>%
mutate_at(vars(-1), untransform)
count_data_ordered <- real_count_data[,order(colnames(real_count_data))]
# Combine the metadata
meta <- left_join(tss_meta %>%
dplyr::select(c("TSS.Code", "Study.Name")) %>%
distinct() %>%
sapply(trimws) %>%
as.data.frame(),
abbrv_meta %>%
dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
distinct()%>%
sapply(trimws) %>%
as.data.frame(),
by = "Study.Name")
counts_data <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
count_data_ordered,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
count_data <- counts_data %>%
mutate(gene = trimws(gene))
ids <- colnames(count_data)[-1]
participants <- extract_element(ids, 3)
condition <- extract_element(ids, 4)
tissue_type <- extract_element(ids, 2)
column_names <- c("Genes" ,  paste(tissue_type, participants, condition, sep = "."))
colnames(count_data) <- column_names
count_data <- setDT(count_data)
# Combine duplicate genes together using the median of the expression
grouped <- count_data[, lapply(.SD, function(x) if (length(x) > 1) ceiling(median(x, na.rm = TRUE)) else x), by = Genes, .SDcols = -"Genes"]
data <- grouped %>%
column_to_rownames(var = "Genes")
# Remove the unwanted sample types from the samples based on the code
codes_to_use <- c("01","02","03","04","05","08","09")
samples_to_use <- data %>%  dplyr::select(ends_with(codes_to_use))
column_names <- colnames(samples_to_use)
prefixes <- substr(column_names,1,2)
abbrvs <- meta$Study.Abbreviation[match(prefixes,meta$TSS.Code)]
column_names_prefixes <- paste0(abbrvs, substr(column_names, 3, nchar(column_names)))
colnames(samples_to_use) <- column_names_prefixes
new_column_names <- colnames(samples_to_use)
suffixes <- substr(new_column_names, nchar(new_column_names) - 1, nchar(new_column_names))
s_abbrvs <- sampletype$Short.Letter.Code[match(suffixes,sampletype$Code)]
column_names_suffxes <- paste0(substr(new_column_names, 1, nchar(new_column_names) - 2), s_abbrvs)
colnames(samples_to_use) <- column_names_suffxes
# Remove 0 genes and samples
unzero_d <- samples_to_use[rowSums(samples_to_use[]) > 0, ] # samples
cols_zeros <- which(apply(unzero_d, 2, function(x) all(x == 0)))
if (length(cols_zeros) > 0) {
reduced <- unzero_d[, -cols_zeros]
} else {
reduced <- unzero_d
}
# convert df to matrix
mapped_matrix <- as.matrix(reduced)
# Calculate the normalisation factor
d0 <- edgeR::calcNormFactors(mapped_matrix, method = "TMM")
# Scale Gene counts
# Divide the samples by their corresponding normalisation factors
scaled_data <- base::sweep(samples_to_use, 2, d0, "/") # scalling the genes (2 = columns)
scaled_data <- ceiling(scaled_data) # Round up
# Filter out non SOI genes
filtered_scalled <- scaled_data[rownames(scaled_data) %in% soi_genes, ]
print(dim(filtered_scalled))
# Log Transform the counts
log_data <- apply(filtered_scalled, MARGIN = c(1,2), FUN = function(x) log(x + 1))
# 5.  MDS
# Transpose the data
t_scaled_log_data <- t(log_data)
sample_dist_matrix <- dist(t_scaled_log_data)
sample_dist_df <- as.data.frame(as.matrix(sample_dist_matrix))
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Convert the MDS object to a dataframe with additional features
mds_df <- as.data.frame(mds) %>%
dplyr::mutate(cancer_type = extract_element(rownames(t_scaled_log_data), 1),
sample_type = extract_element(rownames(t_scaled_log_data), 3))
# Create the plots of the MDS.
sample_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "sample_type", # Colour based on the sample type
size = 1,
repel = TRUE)
cancer_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "cancer_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
# Save the plots.
ggsave("sample_mds_plot.png",
plot = sample_mds,
width = 8,
height = 6,
dpi = 300)
ggsave("cancer_mds_plot.png",
plot = cancer_mds,
width = 8,
height = 6,
dpi = 300)
View(mds_df)
# Produce the MDS object.
mds <- cmdscale(sample_dist_matrix)
# Convert the MDS object to a dataframe with additional features
mds_df <- as.data.frame(mds) %>%
dplyr::mutate(cancer_type = extract_element(rownames(t_scaled_log_data), 1),
sample_type = extract_element(rownames(t_scaled_log_data), 3),
synergy_type = paste(cancer_type, sample_type, sep = "-"))
# Create the plots of the MDS.
sample_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "sample_type", # Colour based on the sample type
size = 1,
repel = TRUE)
cancer_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "cancer_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
synergy_mds <- ggscatter(mds_df, x = "V1", y = "V2",
color = "synergy_type", # Colour based on the cancer type
size = 1,
repel = TRUE)+
theme(legend.position = "none")
synergy_mds
