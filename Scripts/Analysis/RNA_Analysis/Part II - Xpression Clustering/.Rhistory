png("Plots/annotated_dendro.png", width = 20, height = 15, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 24, height = 13, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 28, height = 13, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 33, height = 13, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 38, height = 13, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 42, height = 13, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Cluster the Genes using the average distance and
# extract the dendrogram from the matrix
dist_tree_xprss <- hclust(dist_mtrx_xprss, method="average") %>%
as.dendrogram()
# Get the different heights that show up in the tree
# and sort them
node_hts <- dist_tree_xprss %>%
get_nodes_attr("height") %>%
unique() %>%
sort()
png("Plots/annotated_dendro.png", width = 45, height = 14, units = "cm", res = 300)
# Plot the tree
dendro_png <- dist_tree_xprss %>% dendextend::set("labels_cex", 0.4) %>% plot()
dev.off()
# Iterate over the differnet node heights
for (ht in seq(2,length(node_hts)-1, 25)){
# Select the cut height
cut.ht = node_hts[ht]
# Get the resulting dendrogram
clusters <- cutree(dist_tree_xprss, h = cut.ht)
# Get the genetic makeup of each cluster
cluster_df <- as.data.frame(clusters)%>%
rownames_to_column("Gene")
# Get the number of groups
n_groups <- length(unique(clusters))
# Add this iteration's cluster information to the expression matrix
xprss_df_clustered <- left_join(log_data,
cluster_df,
by = "Gene") %>%
mutate(n_genes = map_dbl(clusters,
~sum(.x == clusters, na.rm = TRUE)
), # number of genes in the cluster
Cluster.Name = ifelse(n_genes == 1, Gene,
paste0("Clust.",clusters))) %>%
dplyr::select(-c("clusters","n_genes"))
# Group the expression matrix in terms of the clusters
grouped_xprss_df_clustered <- xprss_df_clustered %>%
group_by(Cluster.Name) %>%
summarise(across(-Gene, ~ mean(., na.rm = TRUE)))
# Intra Cluster Similarity Score (ICSS)
# Find the clusters with more than a single gene occupant
filled_clusters <- grouped_xprss_df_clustered %>%
filter(str_detect(Cluster.Name, "^Clust.")) %>%
pull(Cluster.Name)
# The number of unclustered genes
n_unclust_genes <- n_groups - length(filled_clusters)
# Iterate over each cluster to calculate its specific similarity score
total_intra_score <- 0
# Filter over these individual clusters creating the cluster specific corr matrix
for (clust in filled_clusters){
intra_corr <- xprss_df_clustered %>%
filter(Cluster.Name == clust) %>%
dplyr::select(-Cluster.Name) %>%
column_to_rownames("Gene") %>%
t() %>%
cor()
# Sum positive correlations
positive_contrib <- sum((intra_corr > 0) *
sigmoid(intra_corr))
# Sum negative correlations
negative_contrib <- sum((intra_corr < 0) *
sigmoid(abs(intra_corr)))
# Get the number of gene pairs
n_pairs <- length(intra_corr)
# Calculate cluster score and adjust by the number of pairs
cluster_score <- (positive_contrib - lambda * negative_contrib) / n_pairs
# Add to total score
total_intra_score <- total_intra_score + cluster_score
}
# Add the score of the unclustered genes
total_intra_score <- total_intra_score + n_unclust_genes
# Average the score by the number of clusters
ICSS <- total_intra_score / n_groups
# Inter Cluster Dissimilarity Score, ICDS
# Redefine the correlation matrix in terms of the clusters
reclustered_matrix <- grouped_xprss_df_clustered %>%
column_to_rownames("Cluster.Name") %>%
t() %>%
cor(., method = "pearson")
ICDS <- sum((1 - abs(reclustered_matrix) / (alpha))) / length(reclustered_matrix)
# Total Cluster Correlation Score (TCCS)
TCCS <- weight*ICSS + (1 - weight)*ICDS
# Collect the Scores from the different iterations
scoring_df <- rbind(
scoring_df,
data.frame(Iteration = ht,
Intra.Score = ICSS,
Inter.Score = ICDS,
Total.Score = TCCS,
Node.Height = cut.ht,
Cluster.Count = length(filled_clusters)
)
)
clust_heatmap <- pheatmap(reclustered_matrix,
breaks = newBreaks ,
color = myColors,
border_color = NA)
png(paste0("Plots/clustered_dendro_", ht, ".png"), width = 30, height = 25, units = "cm", res = 300)
# Plot the resulting tree
dendro_clusterd <- plot(color_branches(dist_tree_xprss, h=cut.ht),
leaflab="none",
col = paletteer_c("grDevices::Terrain 2",
length(unique(clusters))),
main = " Hierarchical clustering (average method)"
)
abline(h = ht, col = "red", lwd = 0.75)
mtext(paste0("Cut Height of ",round(cut.ht, 2)
),
side = 3,
line = 0.5,
cex = 0.8,
adj = 0.5
)
dev.off()
# Save the heatmaps
# ggsave(paste0("Plots/clustered_hmap_", ht, ".png"),
#      plot = clust_heatmap,
#      width = 30,
#      height = 25)
}
# Iterate over the differnet node heights
for (ht in seq(2,length(node_hts)-1, 25)){
# Select the cut height
cut.ht = node_hts[ht]
# Get the resulting dendrogram
clusters <- cutree(dist_tree_xprss, h = cut.ht)
# Get the genetic makeup of each cluster
cluster_df <- as.data.frame(clusters)%>%
rownames_to_column("Gene")
# Get the number of groups
n_groups <- length(unique(clusters))
# Add this iteration's cluster information to the expression matrix
xprss_df_clustered <- left_join(log_data,
cluster_df,
by = "Gene") %>%
mutate(n_genes = map_dbl(clusters,
~sum(.x == clusters, na.rm = TRUE)
), # number of genes in the cluster
Cluster.Name = ifelse(n_genes == 1, Gene,
paste0("Clust.",clusters))) %>%
dplyr::select(-c("clusters","n_genes"))
# Group the expression matrix in terms of the clusters
grouped_xprss_df_clustered <- xprss_df_clustered %>%
group_by(Cluster.Name) %>%
summarise(across(-Gene, ~ mean(., na.rm = TRUE)))
# Intra Cluster Similarity Score (ICSS)
# Find the clusters with more than a single gene occupant
filled_clusters <- grouped_xprss_df_clustered %>%
filter(str_detect(Cluster.Name, "^Clust.")) %>%
pull(Cluster.Name)
# The number of unclustered genes
n_unclust_genes <- n_groups - length(filled_clusters)
# Iterate over each cluster to calculate its specific similarity score
total_intra_score <- 0
# Filter over these individual clusters creating the cluster specific corr matrix
for (clust in filled_clusters){
intra_corr <- xprss_df_clustered %>%
filter(Cluster.Name == clust) %>%
dplyr::select(-Cluster.Name) %>%
column_to_rownames("Gene") %>%
t() %>%
cor()
# Sum positive correlations
positive_contrib <- sum((intra_corr > 0) *
sigmoid(intra_corr))
# Sum negative correlations
negative_contrib <- sum((intra_corr < 0) *
sigmoid(abs(intra_corr)))
# Get the number of gene pairs
n_pairs <- length(intra_corr)
# Calculate cluster score and adjust by the number of pairs
cluster_score <- (positive_contrib - lambda * negative_contrib) / n_pairs
# Add to total score
total_intra_score <- total_intra_score + cluster_score
}
# Add the score of the unclustered genes
total_intra_score <- total_intra_score + n_unclust_genes
# Average the score by the number of clusters
ICSS <- total_intra_score / n_groups
# Inter Cluster Dissimilarity Score, ICDS
# Redefine the correlation matrix in terms of the clusters
reclustered_matrix <- grouped_xprss_df_clustered %>%
column_to_rownames("Cluster.Name") %>%
t() %>%
cor(., method = "pearson")
ICDS <- sum((1 - abs(reclustered_matrix) / (alpha))) / length(reclustered_matrix)
# Total Cluster Correlation Score (TCCS)
TCCS <- weight*ICSS + (1 - weight)*ICDS
# Collect the Scores from the different iterations
scoring_df <- rbind(
scoring_df,
data.frame(Iteration = ht,
Intra.Score = ICSS,
Inter.Score = ICDS,
Total.Score = TCCS,
Node.Height = cut.ht,
Cluster.Count = length(filled_clusters)
)
)
clust_heatmap <- pheatmap(reclustered_matrix,
breaks = newBreaks ,
color = myColors,
border_color = NA)
png(paste0("Plots/clustered_dendro_", ht, ".png"), width = 30, height = 25, units = "cm", res = 300)
# Plot the resulting tree
dendro_clusterd <- plot(color_branches(dist_tree_xprss, h=cut.ht),
leaflab="none",
col = paletteer_c("grDevices::Terrain 2",
length(unique(clusters))),
main = " Hierarchical clustering (average method)"
)
abline(h = ht, col = "red", lwd = 0.75)
mtext(paste0("Iteration ",ht,", Cut Height of ",round(cut.ht, 2)
),
side = 3,
line = 0.5,
cex = 0.8,
adj = 0.5
)
dev.off()
# Save the heatmaps
# ggsave(paste0("Plots/clustered_hmap_", ht, ".png"),
#      plot = clust_heatmap,
#      width = 30,
#      height = 25)
}
# Iterate over the differnet node heights
for (ht in seq(2,length(node_hts)-1, 18)){
# Select the cut height
cut.ht = node_hts[ht]
# Get the resulting dendrogram
clusters <- cutree(dist_tree_xprss, h = cut.ht)
# Get the genetic makeup of each cluster
cluster_df <- as.data.frame(clusters)%>%
rownames_to_column("Gene")
# Get the number of groups
n_groups <- length(unique(clusters))
# Add this iteration's cluster information to the expression matrix
xprss_df_clustered <- left_join(log_data,
cluster_df,
by = "Gene") %>%
mutate(n_genes = map_dbl(clusters,
~sum(.x == clusters, na.rm = TRUE)
), # number of genes in the cluster
Cluster.Name = ifelse(n_genes == 1, Gene,
paste0("Clust.",clusters))) %>%
dplyr::select(-c("clusters","n_genes"))
# Group the expression matrix in terms of the clusters
grouped_xprss_df_clustered <- xprss_df_clustered %>%
group_by(Cluster.Name) %>%
summarise(across(-Gene, ~ mean(., na.rm = TRUE)))
# Intra Cluster Similarity Score (ICSS)
# Find the clusters with more than a single gene occupant
filled_clusters <- grouped_xprss_df_clustered %>%
filter(str_detect(Cluster.Name, "^Clust.")) %>%
pull(Cluster.Name)
# The number of unclustered genes
n_unclust_genes <- n_groups - length(filled_clusters)
# Iterate over each cluster to calculate its specific similarity score
total_intra_score <- 0
# Filter over these individual clusters creating the cluster specific corr matrix
for (clust in filled_clusters){
intra_corr <- xprss_df_clustered %>%
filter(Cluster.Name == clust) %>%
dplyr::select(-Cluster.Name) %>%
column_to_rownames("Gene") %>%
t() %>%
cor()
# Sum positive correlations
positive_contrib <- sum((intra_corr > 0) *
sigmoid(intra_corr))
# Sum negative correlations
negative_contrib <- sum((intra_corr < 0) *
sigmoid(abs(intra_corr)))
# Get the number of gene pairs
n_pairs <- length(intra_corr)
# Calculate cluster score and adjust by the number of pairs
cluster_score <- (positive_contrib - lambda * negative_contrib) / n_pairs
# Add to total score
total_intra_score <- total_intra_score + cluster_score
}
# Add the score of the unclustered genes
total_intra_score <- total_intra_score + n_unclust_genes
# Average the score by the number of clusters
ICSS <- total_intra_score / n_groups
# Inter Cluster Dissimilarity Score, ICDS
# Redefine the correlation matrix in terms of the clusters
reclustered_matrix <- grouped_xprss_df_clustered %>%
column_to_rownames("Cluster.Name") %>%
t() %>%
cor(., method = "pearson")
ICDS <- sum((1 - abs(reclustered_matrix) / (alpha))) / length(reclustered_matrix)
# Total Cluster Correlation Score (TCCS)
TCCS <- weight*ICSS + (1 - weight)*ICDS
# Collect the Scores from the different iterations
scoring_df <- rbind(
scoring_df,
data.frame(Iteration = ht,
Intra.Score = ICSS,
Inter.Score = ICDS,
Total.Score = TCCS,
Node.Height = cut.ht,
Cluster.Count = length(filled_clusters)
)
)
clust_heatmap <- pheatmap(reclustered_matrix,
breaks = newBreaks ,
color = myColors,
border_color = NA)
png(paste0("Plots/clustered_dendro_", ht, ".png"), width = 30, height = 25, units = "cm", res = 300)
# Plot the resulting tree
dendro_clusterd <- plot(color_branches(dist_tree_xprss, h=cut.ht),
leaflab="none",
col = paletteer_c("grDevices::Terrain 2",
length(unique(clusters))),
main = " Hierarchical clustering (average method)"
)
abline(h = ht, col = "red", lwd = 0.75)
mtext(paste0("Iteration ",ht,", Cut Height of ",round(cut.ht, 2)
),
side = 3,
line = 0.5,
cex = 0.8,
adj = 0.5
)
dev.off()
# Save the heatmaps
# ggsave(paste0("Plots/clustered_hmap_", ht, ".png"),
#      plot = clust_heatmap,
#      width = 30,
#      height = 25)
}
# Iterate over the differnet node heights
for (ht in seq(2,length(node_hts)-1, 18)){
# Select the cut height
cut.ht = node_hts[ht]
# Get the resulting dendrogram
clusters <- cutree(dist_tree_xprss, h = cut.ht)
# Get the genetic makeup of each cluster
cluster_df <- as.data.frame(clusters)%>%
rownames_to_column("Gene")
# Get the number of groups
n_groups <- length(unique(clusters))
# Add this iteration's cluster information to the expression matrix
xprss_df_clustered <- left_join(log_data,
cluster_df,
by = "Gene") %>%
mutate(n_genes = map_dbl(clusters,
~sum(.x == clusters, na.rm = TRUE)
), # number of genes in the cluster
Cluster.Name = ifelse(n_genes == 1, Gene,
paste0("Clust.",clusters))) %>%
dplyr::select(-c("clusters","n_genes"))
# Group the expression matrix in terms of the clusters
grouped_xprss_df_clustered <- xprss_df_clustered %>%
group_by(Cluster.Name) %>%
summarise(across(-Gene, ~ mean(., na.rm = TRUE)))
# Intra Cluster Similarity Score (ICSS)
# Find the clusters with more than a single gene occupant
filled_clusters <- grouped_xprss_df_clustered %>%
filter(str_detect(Cluster.Name, "^Clust.")) %>%
pull(Cluster.Name)
# The number of unclustered genes
n_unclust_genes <- n_groups - length(filled_clusters)
# Iterate over each cluster to calculate its specific similarity score
total_intra_score <- 0
# Filter over these individual clusters creating the cluster specific corr matrix
for (clust in filled_clusters){
intra_corr <- xprss_df_clustered %>%
filter(Cluster.Name == clust) %>%
dplyr::select(-Cluster.Name) %>%
column_to_rownames("Gene") %>%
t() %>%
cor()
# Sum positive correlations
positive_contrib <- sum((intra_corr > 0) *
sigmoid(intra_corr))
# Sum negative correlations
negative_contrib <- sum((intra_corr < 0) *
sigmoid(abs(intra_corr)))
# Get the number of gene pairs
n_pairs <- length(intra_corr)
# Calculate cluster score and adjust by the number of pairs
cluster_score <- (positive_contrib - lambda * negative_contrib) / n_pairs
# Add to total score
total_intra_score <- total_intra_score + cluster_score
}
# Add the score of the unclustered genes
total_intra_score <- total_intra_score + n_unclust_genes
# Average the score by the number of clusters
ICSS <- total_intra_score / n_groups
# Inter Cluster Dissimilarity Score, ICDS
# Redefine the correlation matrix in terms of the clusters
reclustered_matrix <- grouped_xprss_df_clustered %>%
column_to_rownames("Cluster.Name") %>%
t() %>%
cor(., method = "pearson")
ICDS <- sum((1 - abs(reclustered_matrix) / (alpha))) / length(reclustered_matrix)
# Total Cluster Correlation Score (TCCS)
TCCS <- weight*ICSS + (1 - weight)*ICDS
# Collect the Scores from the different iterations
scoring_df <- rbind(
scoring_df,
data.frame(Iteration = ht,
Intra.Score = ICSS,
Inter.Score = ICDS,
Total.Score = TCCS,
Node.Height = cut.ht,
Cluster.Count = length(filled_clusters)
)
)
clust_heatmap <- pheatmap(reclustered_matrix,
breaks = newBreaks ,
color = myColors,
border_color = NA)
png(paste0("Plots/clustered_dendro_", ht, ".png"), width = 30, height = 25, units = "cm", res = 300)
# Plot the resulting tree
dendro_clusterd <- plot(color_branches(dist_tree_xprss, h=cut.ht),
leaflab="none",
col = paletteer_c("grDevices::Terrain 2",
length(unique(clusters))),
main = " Hierarchical clustering (average method)"
)
abline(h = cut.ht, col = "red", lwd = 0.75)
mtext(paste0("Iteration ",ht,", Cut Height of ",round(cut.ht, 2)
),
side = 3,
line = 0.5,
cex = 0.8,
adj = 0.5
)
dev.off()
# Save the heatmaps
# ggsave(paste0("Plots/clustered_hmap_", ht, ".png"),
#      plot = clust_heatmap,
#      width = 30,
#      height = 25)
}
