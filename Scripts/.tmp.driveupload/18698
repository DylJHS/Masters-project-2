---
title: "RNA Inpupt"
output: html_document
date: "2024-04-30"
Note: This script is for the formatting of the input RNAseq for the model.
---



1.  SETUP

1.1. SETUP

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/Dyll/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project")
```

1.2. LOAD THE PACKAGES

```{r}
library(dplyr)
library(knitr)
library(tidyverse) 
library(edgeR)
library(limma)
library(ggrepel)
library(data.table)
library(ggplot2)
```

1.4. REUSABLE FUNCTIONS

```{r}
extract_element <- function(strings, index) {
  # Split each string by "." and extract the third element
  element_list <- sapply(strsplit(strings, "\\."), function(x) x[index])
  return(element_list)
}

untransform_exp <- function(x) {#Function to convert the log transformed counts back into original counts
  return(ceiling((2^x)-1))
}

untransform_tpm <- function(x) {#Function to convert the log transformed counts back into original counts
  return(ceiling((2^x)-0.001))
}
```

2.  COLLECTION

2.1. LOAD THE DATA

```{r}
# SOI genes
soi <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_SOI.csv")
soi_genes <-soi[,2]

# Load the TCGA PanCan RSEM Expected Counts
ori_exp <- read.csv("Data/RNA_Data/TCGA_Norm/tcga_gene_expected_count.csv")
order_exp <- ori_exp[,order(colnames(ori_exp))]
order_exp <- order_exp[0:6000,0:2500]

# Load the TCGA PanCan TPM counts
ori_tpm <- read.csv("Data/RNA_Data/TCGA_TPM/TCGA_mRNA_TPM_Full.csv")
order_tpm <- ori_tpm[,order(colnames(ori_tpm))] %>% 
  dplyr::select(-"id")
order_tpm <- order_tpm[0:6000,0:2500]

# Cancer/Tissue Metadata
tss_meta <- read.csv("Data/Other/TCGA_meta/tissueSourceSite.tsv", sep = "\t")
abbrv_meta <- read.csv("Data/Other/TCGA_meta/bcrBatchCode.tsv", sep = "\t")
meta <- left_join(tss_meta %>%
                    dplyr::select(c("TSS.Code", "Study.Name")) %>%
                    distinct() %>%
                    sapply(trimws) %>%
                    as.data.frame(),
                  abbrv_meta %>%
                     dplyr::select(c("Study.Abbreviation", "Study.Name")) %>%
                    distinct()%>%
                    sapply(trimws) %>%
                    as.data.frame(),
                  by = "Study.Name")

# Gene Metadata
gene_ids <- read.delim("Data/Other/TCGA_meta/TCGA_PanCan_TPM_Gene_Annotations.txt")


```

3.  CLEANING AND PRE-PROCESSING

3.1. RE-TRANSFORM THE EXPECTED COUNT DATA FROM THE y = Log2(x+1) VALUES TO THE COUNTS USING THE FOLLOWING FORUMLA: x = 2^y^âˆ’1.

```{r}
trans_exp <- order_exp # Log transformed Expected Counts
rownames(trans_exp) <- NULL
trans_tpm <- order_tpm # Log transformed TPM Counts
rownames(trans_tpm) <- NULL

count_exp <- trans_exp %>%
  mutate_at(vars(-1), untransform_exp)
count_tpm <- trans_tpm %>%
  mutate_at(vars(-1), untransform_tpm)
```


```{r}
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")

exp_samples_to_use <- count_exp %>%  dplyr::select(c("sample", ends_with(codes_to_use)))
tpm_samples_to_use <- count_tpm %>%  dplyr::select(c("Gene", ends_with(codes_to_use)))
```


3.2. CONVERT THE GENE IDS INTO GENE NAMES

```{r}
counts_exp <- right_join(gene_ids %>% 
                    dplyr::select(c("id", "gene")) %>% 
                    sapply(trimws) %>% 
                    as.data.frame(),
                  exp_samples_to_use,
                  by = c("id" = "sample")) %>% 
  dplyr::select(-"id")

counts_exp <- counts_exp %>%
  mutate(gene = trimws(gene))
  
```


HANDLE DUPLICATE GENES
```{r}
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)  
setDT(tpm_samples_to_use)  

# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
grouped_tpm <- tpm_samples_to_use[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Gene, .SDcols = -"Gene"]

# Edit ids so as to be able to identify the condition
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
groups_tpm <- as.data.frame(grouped_tpm)

exp_data <- distinct(groups_exp) %>% 
  column_to_rownames(var = "gene")
tpm_data <- distinct(groups_tpm) %>% 
  column_to_rownames(var = "Gene")
```

```{r}
df_long <- pivot_longer(tpm_data[,72:80], cols = everything(), names_to = "Variable", values_to = "Value")

# Plot using ggplot
ggplot(df_long, aes(x = Value)) +
  geom_histogram(bins = 30, fill = "blue", color = "black") + # Adjust the bins and colors
  facet_wrap(~ Variable, scales = "free") +
  theme_minimal() +
  labs(title = "Histograms for each column", x = "Value", y = "Count")
```


3.4. REMOVAL OF THE SAMPLES THAT LACK EXPRESSION VALUES 

```{r}
# Remove samples (cols) with 0 values throughout
cols_zeros_tpm <- which(apply(tpm_data, 2, function(x) all(x == 0)))
cols_zeros_exp <- which(apply(exp_data, 2, function(x) all(x == 0)))

if (length(cols_zeros_tpm) > 0) {
  data_complete_tpm <- tpm_data[, -cols_zeros_tpm]
} else {
  data_complete_tpm <- tpm_data
}

if (length(cols_zeros_exp) > 0) {
  data_complete_exp <- exp_data[, -cols_zeros_exp]
} else {
  data_complete_exp <- exp_data
}


```




3.5. DGE MODELLING FOR THE COUNT DATA IN ORDER TO GENERATE A INPUT SET THAT HAS BEEN NORMALISED TO ACCOUNT FOR LIBRARY SIZE
Only need to do this once for the expected count data (will not work with the tpm due to lower counts) but can then apply the library size factors to their respective samples in both the expected counts dataset and the tpm dataset

```{r}
# Identify genes with 0 expression across all samples
zero_genes_exp <- rowSums(data_complete_exp == 0) == ncol(data_complete_exp)

# Remove genes with 0 expression across all samples
filt_dt_exp <- data_complete_exp[!zero_genes_exp, ]

# convert df to matrix 
matrix_exp <- filt_dt_exp %>% as.matrix()

d_exp <- DGEList(matrix_exp)

# Calculate the normalisation factor 
Normfact_exp <- calcNormFactors(d_exp, method = "TMM")
```

4.2. CREATE THE SAMPLE FACTORS

IMPORTANT: The order of the condition factor will determine how the logFCs are calculated, with the first level representing the reference (denominator) which in this case should be the healthy condition.

```{r}
participants <- extract_element(colnames(mapped_matrix), 2)
condition <- extract_element(colnames(mapped_matrix), 3)
tissue_type <- extract_element(colnames(mapped_matrix), 1)

participants <- factor(participants)
tissue_type <- factor(tissue_type)
condition <- factor(condition, levels=c("N","C"))
```

4.3. TRIM LOW COUNT GENES

```{r}
# Remove low count genes, those with a count below 10
keep<-filterByExpr(d0,group = condition, min.count = 10)
d0<-d0[keep,,keep.lib.size=FALSE]

print(paste("The size of the dataframe is now", 
            dim(d0)[1], "x", dim(d0)[2]))
```

4.4. PLOT THE MDS OF THE FACTORS

Plot the 2 dimensional graph of the main logFC components in terms of the condition

```{r}
plotMDS(d0, pch = 1, col = ifelse(condition == "C", "red", "blue"))
```

Plot the 2 dimensional graph of the main logFC components in terms of the tissue type

```{r}
plotMDS(d0, pch = 3, col = tissue_type)
```

4.5. CREATE THE LINEAR MODEL

```{r}
# Set the unique participants and the condition as the main effects.
mm <- model.matrix(~ participants + condition)
```

```{r}
# Apply voom() to transfrom the data so that it is suitable for linear modelling.
y <- voom(d0, mm, plot = T)

# Fit the linear model
fit <- lmFit(y, mm)

# smooth the standard errors
fit2 <- eBayes(fit)
```


