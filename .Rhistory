library(knitr)
library(factoextra)
library(data.table)
library(ggpubr)
library(psych)
library(tidyverse)
exp_data <- distinct(groups_exp) %>%
tidyverse::column_to_rownames(var = "gene")
exp_data <- distinct(groups_exp) %>%
R::column_to_rownames(var = "gene")
exp_data <- distinct(groups_exp) %>% column_to_rownames(var = "gene")
tpm_data <- distinct(groups_tpm) %>%
dplyr::column_to_rownames(var = "Gene")
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gene")
tpm_data <- distinct(groups_tpm) %>%
dplyr::column_to_rownames(var = "Gene")
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gene")
tpm_data <- distinct(groups_tpm) %>%
column_to_rownames(var = "Gene")
# Remove samples (cols) with 0 values throughout
cols_zeros_tpm <- which(apply(tpm_data, 2, function(x) all(x == 0)))
cols_zeros_exp <- which(apply(exp_data, 2, function(x) all(x == 0)))
if (length(cols_zeros_tpm) > 0) {
data_complete_tpm <- tpm_data[, -cols_zeros_tpm]
} else {
data_complete_tpm <- tpm_data
}
if (length(cols_zeros_exp) > 0) {
data_complete_exp <- exp_data[, -cols_zeros_exp]
} else {
data_complete_exp <- exp_data
}
# Identify genes with 0 expression across all samples
zero_genes_exp <- rowSums(data_complete_exp == 0) == ncol(data_complete_exp)
# Remove genes with 0 expression across all samples
filt_dt_exp <- data_complete_exp[!zero_genes_exp, ]
# convert df to matrix
matrix_exp <- filt_dt_exp %>% as.matrix()
d_exp <- DGEList(matrix_exp)
# convert df to matrix
matrix_exp <- filt_dt_exp %>% as.matrix()
d_exp <- DGEList(matrix_exp)
library(dplyr)
library(readr)
library(mltools)
library(knitr)
library(factoextra)
library(data.table)
library(ggpubr)
library(psych)
library(edgeR)
library(dplyr)
library(readr)
library(mltools)
library(knitr)
library(factoextra)
library(data.table)
library(ggpubr)
library(psych)
library(limma)
library(edgeR)
# convert df to matrix
matrix_exp <- filt_dt_exp %>% as.matrix()
d_exp <- DGEList(matrix_exp)
# Calculate the normalisation factor
Normfact_exp <- calcNormFactors(d_exp, method = "TMM")
Normfactors <- as.data.frame(Normfact_exp$samples) %>% select("norm.factors")
# match the column names from the normalisation factor df with that of the other dfs in order to divide the count values by the library size factors for the correct samples
matching_cols_tpm <- colnames(tpm_data)[match(rownames(Normfactors), colnames(tpm_data))]
scld_cnts_tpm <- round(sweep(tpm_data[, matching_cols_tpm], 2, Normfactors$norm.factors, "/"),2)
matching_cols_exp <- colnames(exp_data)[match(rownames(Normfactors), colnames(exp_data))]
scld_cnts_exp <- round(sweep(exp_data[, matching_cols_exp], 2, Normfactors$norm.factors, "/"),2)
# Expected Counts
exp_set <- data_complete_exp %>% filter(rownames(.) %in% soi_genes)# Raw expected counts
scld_exp_set <- scld_cnts_exp %>% filter(rownames(.) %in% soi_genes)# Library size normalised Expected counts
log_exp <- exp_set %>%
mutate_at(vars(everything()), transform_exp) # Log transformed expected counts
log_scld_exp <- scld_exp_set %>%
mutate_at(vars(everything()), transform_exp) # Log transformed Library size normalised expected counts
# Transcript per million (TPM)
tpm_set <- data_complete_tpm %>% filter(rownames(.) %in% soi_genes)# Raw TPM counts
scld_tpm_set <- scld_cnts_tpm %>% filter(rownames(.) %in% soi_genes)# Library size normalised TPM counts
log_tpm <- tpm_set %>%
mutate_at(vars(everything()), transform_tpm) # Log transformed TPM counts
log_scld_tpm <- scld_tpm_set %>%
mutate_at(vars(everything()), transform_tpm) # Log transformed Library size normalised TPM counts
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
)
View(full_cin)
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print("you")
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print(head(rna_set,6))
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print(head(rna_set[0:3,0:3]))
}
for (rna_set in  rna_list){
print(rna_set[0:3,0:3])
}
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print(rna_set[0:3,0:3])
}
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
rna_set[0:3,0:3]
}
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
rna_set
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
head(rna_set)
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
rna_list <- as.list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print(head(rna_set))
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
print(head(rna_set))
}
# merged_df <- Reduce(function(x, y) merge(x, y, by = "common_column"), df_list)
View(scld_tpm_set)
View(exp_set)
View(scld_exp_set)
View(log_exp)
View(tpm_set)
trans_exp <- order_exp # Log transformed Expected Counts
rownames(trans_exp) <- NULL
trans_tpm <- order_tpm # Log transformed TPM Counts
rownames(trans_tpm) <- NULL
count_exp <- trans_exp %>%
mutate_at(vars(-1), untransform_exp)
count_tpm <- trans_tpm %>%
mutate_at(vars(-1), untransform_tpm)
# Remove the non-cancerous sample types from the set
codes_to_use <- c("01","02","03","04","05","08","09")
exp_samples_to_use <- count_exp %>%  dplyr::select(c("sample", ends_with(codes_to_use)))
tpm_samples_to_use <- count_tpm %>%  dplyr::select(c("Gene", ends_with(codes_to_use)))
# Convert the Gene Ids into names
counts_exp <- right_join(gene_ids %>%
dplyr::select(c("id", "gene")) %>%
sapply(trimws) %>%
as.data.frame(),
exp_samples_to_use,
by = c("id" = "sample")) %>%
dplyr::select(-"id")
counts_exp <- counts_exp %>%
mutate(gene = trimws(gene))
# Convert data to a data.table for faster processing during the grouping of the duplicate genes
setDT(counts_exp)
setDT(tpm_samples_to_use)
# Combine duplicate genes together using the median of the expression
grouped_exp <- counts_exp[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = gene, .SDcols = -"gene"]
grouped_tpm <- tpm_samples_to_use[, lapply(.SD, function(x) if (length(x) > 1) median(x, na.rm = TRUE) else x), by = Gene, .SDcols = -"Gene"]
# Reset the row names to the Gene names
groups_exp <- as.data.frame(grouped_exp)
groups_tpm <- as.data.frame(grouped_tpm)
exp_data <- distinct(groups_exp) %>%
column_to_rownames(var = "gene")
tpm_data <- distinct(groups_tpm) %>%
column_to_rownames(var = "Gene")
# Remove samples (cols) with 0 values throughout
cols_zeros_tpm <- which(apply(tpm_data, 2, function(x) all(x == 0)))
cols_zeros_exp <- which(apply(exp_data, 2, function(x) all(x == 0)))
if (length(cols_zeros_tpm) > 0) {
data_complete_tpm <- tpm_data[, -cols_zeros_tpm]
} else {
data_complete_tpm <- tpm_data
}
if (length(cols_zeros_exp) > 0) {
data_complete_exp <- exp_data[, -cols_zeros_exp]
} else {
data_complete_exp <- exp_data
}
# Identify genes with 0 expression across all samples
zero_genes_exp <- rowSums(data_complete_exp == 0) == ncol(data_complete_exp)
# Remove genes with 0 expression across all samples
filt_dt_exp <- data_complete_exp[!zero_genes_exp, ]
# Turn into a DGE object
matrix_exp <- filt_dt_exp %>% as.matrix()
d_exp <- DGEList(matrix_exp)
# Calculate the normalisation factor
Normfact_exp <- calcNormFactors(d_exp, method = "TMM")
Normfactors <- as.data.frame(Normfact_exp$samples) %>% select("norm.factors")
# match the column names from the normalisation factor df with that of the other dfs in order to divide the count values by the library size factors for the correct samples
matching_cols_tpm <- colnames(tpm_data)[match(rownames(Normfactors), colnames(tpm_data))]
scld_cnts_tpm <- round(sweep(tpm_data[, matching_cols_tpm], 2, Normfactors$norm.factors, "/"),2)
matching_cols_exp <- colnames(exp_data)[match(rownames(Normfactors), colnames(exp_data))]
scld_cnts_exp <- round(sweep(exp_data[, matching_cols_exp], 2, Normfactors$norm.factors, "/"),2)
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
View(tss_meta)
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>% as.data.frame()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
log_scld_exp <- scld_exp_set %>% # Log transformed Library size normalised expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
log_scld_exp <- scld_exp_set %>% # Log transformed Library size normalised expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Transcript per million (TPM)
tpm_set <- data_complete_tpm %>% # Raw TPM counts
filter(rownames(.) %in% soi_genes) %>%
t()
scld_tpm_set <- scld_cnts_tpm %>% # Library size normalised TPM counts
filter(rownames(.) %in% soi_genes) %>%
t()
log_tpm <- tpm_set %>% # Log transformed TPM counts
mutate_at(vars(everything()), transform_tpm) %>%
t()
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
log_scld_exp <- scld_exp_set %>% # Log transformed Library size normalised expected counts
mutate_at(vars(everything()), transform_exp) %>%
t()
# Transcript per million (TPM)
tpm_set <- data_complete_tpm %>% # Raw TPM counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
scld_tpm_set <- scld_cnts_tpm %>% # Library size normalised TPM counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
log_tpm <- tpm_set %>% # Log transformed TPM counts
mutate_at(vars(everything()), transform_tpm)
log_scld_tpm <- scld_tpm_set %>% # Log transformed Library size normalised TPM counts
mutate_at(vars(everything()), transform_tpm)
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
)
View(log_scld_tpm)
View(tpm_set)
View(t_hrd)
View(full_cin)
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
) %>% column_to_rownames("Row.names")
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "Row.names") %>%
column_to_rownames("Row.names")
}
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "row.names") %>%
column_to_rownames("Row.names")
}
View(full_df)
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "row.names")
}
View(full_df)
View(log_scld_tpm)
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
) %>%
mutate(Row.names = str_replace_all(Row.names, "-", ".")) %>%
column_to_rownames("Row.names")
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "row.names")
}
View(full_df)
View(full_df)
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
) %>%
mutate(Row.names = str_replace_all(Row.names, "-", "."))
t_hrd <- as.data.frame(t(ori_hrd))
first_hrd <- t_hrd
colnames(first_hrd) <- t_hrd[1, ]
hrd <- as.data.frame(first_hrd[-1,])
# ARM-LEVEL ANEUPLOIDIES
# Replace the NAs with 0
cvn_arm <- ori_arm_cnv %>% replace(is.na(.), 0)
# Re-organise the columns
cnvs_arm <- cvn_arm %>%
column_to_rownames("Sample") %>%
dplyr::select(-"Type")
full_cin <- merge(
hrd,
cnvs_arm,
by = "row.names"
) %>%
mutate(Row.names = str_replace_all(Row.names, "-", ".")) %>%
column_to_rownames("Row.names")
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "row.names")
}
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
# for (rna_set in  rna_list){
#   full_df <- merge(rna_set, full_cin, by = "row.names")
# }
full_df <- merge(log_scld_tpm, full_cin, by = "row.names")
View(full_df)
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
# for (rna_set in  rna_list){
#   full_df <- merge(rna_set, full_cin, by = "row.names")
# }
full_df <- merge(log_scld_exp, full_cin, by = "row.names")
View(log_scld_tpm)
View(log_scld_exp)
# Expected Counts
exp_set <- data_complete_exp %>% # Raw expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
scld_exp_set <- scld_cnts_exp %>% # Library size normalised Expected counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
log_exp <- exp_set %>% # Log transformed expected counts
mutate_at(vars(everything()), transform_exp)
log_scld_exp <- scld_exp_set %>% # Log transformed Library size normalised expected counts
mutate_at(vars(everything()), transform_exp)
# Transcript per million (TPM)
tpm_set <- data_complete_tpm %>% # Raw TPM counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
scld_tpm_set <- scld_cnts_tpm %>% # Library size normalised TPM counts
filter(rownames(.) %in% soi_genes) %>%
t() %>%
as.data.frame()
log_tpm <- tpm_set %>% # Log transformed TPM counts
mutate_at(vars(everything()), transform_tpm)
log_scld_tpm <- scld_tpm_set %>% # Log transformed Library size normalised TPM counts
mutate_at(vars(everything()), transform_tpm)
rna_list <- list(tpm_set, scld_tpm_set, log_scld_tpm, log_tpm, exp_set, scld_exp_set, log_exp, log_scld_exp)
for (rna_set in  rna_list){
full_df <- merge(rna_set, full_cin, by = "row.names")
}
# full_df <- merge(log_scld_exp, full_cin, by = "row.names")
source("~/Documents/Education/VU_UVA/Internship/Epigenetics/Janssen_Group-UMCUtrecht/Main_Project/Scripts/Analysis/Classification/RNA Input/full_rna_sets_creation.r", echo=TRUE)
